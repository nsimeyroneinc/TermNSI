{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Exercices sur les bases de donn\u00e9es \u2693\ufe0e Ce site propose diff\u00e9rents exercices sur les bases de donn\u00e9e et le langage SQL . Vous y trouverez diff\u00e9rents exercices sur les th\u00e8mes suivants : \ud83d\udd28 Cr\u00e9ation de base de donn\u00e9es et insertion de valeurs (hors du programme NSI mais n\u00e9anmoins int\u00e9ressant), \ud83d\udc2d Requ\u00eates sur une seule table , \ud83d\udc08 Requ\u00eates sur plusieurs tables , \ud83d\udc2f Exemples complets . Le site n'a pas vocation \u00e0 \u00eatre un cours sur les bases de donn\u00e9es ni sur le langage SQL . Il propose simplement des exercices de r\u00e9daction d'instructions SQL dans le cadre du programme de la sp\u00e9cialit\u00e9 NSI . Notez que dans chaque section sauf la derni\u00e8re, le premier exercice propos\u00e9 pr\u00e9sente les nouvelles instructions SQL utilis\u00e9es. La derni\u00e8re section propose des exercices reprenant l'ensemble des instructions pr\u00e9sent\u00e9es dans les pr\u00e9c\u00e9dentes. Les commandes de base de SQL sont rappel\u00e9es dans le memento SQL .","title":"\ud83c\udfe1 Accueil"},{"location":"#exercices-sur-les-bases-de-donnees","text":"Ce site propose diff\u00e9rents exercices sur les bases de donn\u00e9e et le langage SQL . Vous y trouverez diff\u00e9rents exercices sur les th\u00e8mes suivants : \ud83d\udd28 Cr\u00e9ation de base de donn\u00e9es et insertion de valeurs (hors du programme NSI mais n\u00e9anmoins int\u00e9ressant), \ud83d\udc2d Requ\u00eates sur une seule table , \ud83d\udc08 Requ\u00eates sur plusieurs tables , \ud83d\udc2f Exemples complets . Le site n'a pas vocation \u00e0 \u00eatre un cours sur les bases de donn\u00e9es ni sur le langage SQL . Il propose simplement des exercices de r\u00e9daction d'instructions SQL dans le cadre du programme de la sp\u00e9cialit\u00e9 NSI . Notez que dans chaque section sauf la derni\u00e8re, le premier exercice propos\u00e9 pr\u00e9sente les nouvelles instructions SQL utilis\u00e9es. La derni\u00e8re section propose des exercices reprenant l'ensemble des instructions pr\u00e9sent\u00e9es dans les pr\u00e9c\u00e9dentes. Les commandes de base de SQL sont rappel\u00e9es dans le memento SQL .","title":"Exercices sur les bases de donn\u00e9es"},{"location":"memento_sql/","text":"Memento SQL \u2693\ufe0e Ce document n'a pas la vocation d'\u00eatre exhaustif. On pourra se r\u00e9f\u00e9rer \u00e0 ce site afin de le compl\u00e9ter et avoir plus de d\u00e9tails. Dans certains dialectes SQL , les points-virgules en fin de ligne sont indispensables m\u00eame s'il n'y a qu'une seule instruction. Bien que n'utilisions ici que des instructions uniques, on \u00e9crit tout de m\u00eame les points-virgules en fin de ligne. Liens directs : \u2693\ufe0e Cr\u00e9ation d'une base de donn\u00e9es Cr\u00e9ation de tables Afficher toute une table Effacer une base, une table Insertion de valeurs Suppression de valeurs Mise \u00e0 jour de valeurs S\u00e9lections Cr\u00e9ation d'une base de donn\u00e9es \u2693\ufe0e La base n'existe pas : \ud83d\uddc2\ufe0f Requ\u00eate SQL CREATE DATABASE ma_base ; Au cas o\u00f9 la base existe et que l'on ne souhaite pas l'\u00e9craser : \ud83d\uddc2\ufe0f Requ\u00eate SQL CREATE DATABASE IF NOT EXISTS ma_base ; Cr\u00e9ation de tables \u2693\ufe0e Cas de base : \ud83d\uddc2\ufe0f Requ\u00eate SQL CREATE TABLE ma_table ( attribut_1 INTEGER PRIMARY KEY AUTOINCREMENT , attribut_2 TEXT , attribut_3 VARCHAR ( 50 ) ); L\u00e0 encore on peut ajouter l'argument IF NOT EXISTS . Cl\u00e9 primaire multiple : \ud83d\uddc2\ufe0f Requ\u00eate SQL CREATE TABLE ma_table ( attribut_1 INTEGER , attribut_2 TEXT , attribut_3 VARCHAR ( 50 ), PRIMARY KEY ( attribut_1 , attribut_2 ) ); Cl\u00e9 \u00e9trang\u00e8re : \ud83d\uddc2\ufe0f Requ\u00eate SQL CREATE TABLE ma_table ( attribut_1 INTEGER PRIMARY KEY AUTOINCREMENT , attribut_2 TEXT , attribut_3 VARCHAR ( 50 ), FOREIGN KEY ( attribut_1 ) REFERENCES autre_table ( attribut_de_reference ) ); Afficher toute une table \u2693\ufe0e On effectue une requ\u00eate : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT * FROM ma_table ; Effacer une base, une table \u2693\ufe0e Une base : \ud83d\uddc2\ufe0f Requ\u00eate SQL DROP DATABASE ma_base ; Une table : \ud83d\uddc2\ufe0f Requ\u00eate SQL DROP TABLE ma_table ; Insertion de valeurs \u2693\ufe0e On renseigne touts les attributs dans l'ordre de leur cr\u00e9ation : \ud83d\uddc2\ufe0f Requ\u00eate SQL INSERT INTO ma_table VALUES ( valeur_1 , valeur_2 , valeur_3 ); On ne renseigne que les attributs cit\u00e9s dans l'ordre souhait\u00e9 : \ud83d\uddc2\ufe0f Requ\u00eate SQL INSERT INTO ma_table ( attribut_3 , attribut_1 ) VALUES ( valeur_3 , valeur_1 ); Insertion de plusieurs lignes : \ud83d\uddc2\ufe0f Requ\u00eate SQL INSERT INTO ma_table ( attribut_3 , attribut_1 ) VALUES ( valeur_3_1 , valeur_1_1 ), ( valeur_3_2 , valeur_1_2 ), ( valeur_3_3 , valeur_1_3 ); Suppression de valeurs \u2693\ufe0e On supprime des entr\u00e9es, des lignes, en pr\u00e9cisant une condition (ici les entr\u00e9es dont l' attribut_1 vaut 8 ) : \ud83d\uddc2\ufe0f Requ\u00eate SQL DELETE FROM ma_table WHERE attribut_1 = 8 ; Mise \u00e0 jour de valeurs \u2693\ufe0e Modification de la valeur pour toutes les lignes d'une table : \ud83d\uddc2\ufe0f Requ\u00eate SQL UPDATE ma_table SET attribut_1 = valeur_1 ; Modification de la valeur en posant une condition : \ud83d\uddc2\ufe0f Requ\u00eate SQL UPDATE ma_table SET attribut_1 = valeur_1 WHERE condition ; S\u00e9lections \u2693\ufe0e Cas de base \u2693\ufe0e Tous les attributs : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT * FROM ma_table ; Seulement certains attributs : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT attribut_1 , attribut_3 FROM ma_table ; Avec une condition : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT attribut_1 , attribut_3 FROM ma_table WHERE attribut_2 = valeur_2 ; On peut utiliser les op\u00e9rateurs = (attention, un seul symbole contrairement au == de Python), <> (plusieurs syst\u00e8mes de gestion de BDD acceptent aussi != ), > , < , >= , <= , AND , OR . Les cha\u00eenes de caract\u00e8res : L'usage veut que l'on d\u00e9limite les cha\u00eenes de caract\u00e8res par des guillemets simples : 'chaine' . Les guillemets doubles sont r\u00e9serv\u00e9s aux noms de tables, d'attributs : \"attribut_1\" = 'chaine' . Dans les faits, cela ne change pas grand chose ! En cas de stricte \u00e9galit\u00e9 : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT attribut_1 , attribut_3 FROM ma_table WHERE attribut_2 = 'chat' Si l'on cherche les cha\u00eenes d\u00e9butant par 'chat' ( chat , chatte , chaton ...): \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT attribut_1 , attribut_3 FROM ma_table WHERE attribut_2 LIKE 'chat%' Si l'on cherche les cha\u00eenes se terminant par 'chat' ( achat , le chat ...): \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT attribut_1 , attribut_3 FROM ma_table WHERE attribut_2 LIKE '%chat' Fonctions d'agr\u00e9gation \u2693\ufe0e Compter les lignes v\u00e9rifiant une condition : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT COUNT ( * ) FROM ma_table WHERE condition ; Regrouper toutes les lignes selon la valeur d'un attribut : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT COUNT ( * ) FROM ma_table WHERE condition GROUP BY attribut_1 ; La maximum d'un attribut : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT MAX ( attribut_1 ) FROM ma_table WHERE condition ; Il existe aussi la fonction MIN . La somme d'un attribut : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT SUM ( attribut_1 ) FROM ma_table WHERE condition ; La moyenne d'un attribut : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT AVG ( attribut_1 ) FROM ma_table WHERE condition ; Trier les donn\u00e9es : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT attribut_1 FROM ma_table WHERE condition ORDER BY attribut_2 ASC ; ASC pour ASCENDING et l'ordre croissant. Utiliser DESC pour l'ordre d\u00e9croissant. N'afficher que les 10 premiers r\u00e9sultats : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT attribut_1 FROM ma_table WHERE condition LIMIT 10 ; Jointures \u2693\ufe0e Mettre en correspondance plusieurs tables gr\u00e2ce aux cl\u00e9s \u00e9trang\u00e8res : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT table_1 . attribut_1 , table_2 . attribut_3 FROM table_1 JOIN table_2 ON table_1 . attribut_1 = table_2 . attribut_de_reference JOIN table_3 ON table_2 . attribut_2 = table_3 . attribut_de_reference ; On pr\u00e9cise \u00e0 quelles tables appartiennent les attributs afin de lever les ambigu\u00eft\u00e9s si deux tables ont des attributs portant le m\u00eame nom.","title":"\ud83d\udca1 Memento SQL"},{"location":"memento_sql/#memento-sql","text":"Ce document n'a pas la vocation d'\u00eatre exhaustif. On pourra se r\u00e9f\u00e9rer \u00e0 ce site afin de le compl\u00e9ter et avoir plus de d\u00e9tails. Dans certains dialectes SQL , les points-virgules en fin de ligne sont indispensables m\u00eame s'il n'y a qu'une seule instruction. Bien que n'utilisions ici que des instructions uniques, on \u00e9crit tout de m\u00eame les points-virgules en fin de ligne.","title":"Memento SQL"},{"location":"01_lycee/lycee/","text":"Base de donn\u00e9e d'un lyc\u00e9e \u2693\ufe0e On souhaite cr\u00e9er une base de donn\u00e9e permettant de stocker les informations d\u00e9crivant les \u00e9l\u00e8ves d'un lyc\u00e9e ainsi que leur classe. Un \u00e9l\u00e8ve est d\u00e9crit par : un identifiant unique (un entier) ; son nom ; son pr\u00e9nom ; sa classe. Une classe est d\u00e9crite par : un identifiant unique (un entier) ; son nom (par exemple \u00ab Terminale 2 \u00bb) ; son niveau, nombre entier (2 pour les secondes, 1 pour les premi\u00e8res, 0 pour les terminales) ; sa fili\u00e8re (\u00ab G\u00e9n\u00e9rale \u00bb, \u00ab STI2D \u00bb, etc ...). Les classes de secondes seront dans la fili\u00e8re \u00ab Seconde \u00bb. Afin d'\u00e9viter les r\u00e9p\u00e9titions dans les tables, les informations sur les fili\u00e8res seront regroup\u00e9es dans une table s\u00e9par\u00e9e. La structure de la base est donc la suivante : Table filieres : id : identifiant (nombre entier, cl\u00e9 primaire) ; filiere : description de la fili\u00e8re (texte). Table classes : id : identifiant (nombre entier, cl\u00e9 primaire) ; nom : nom de la classe (texte) ; niveau : niveau de la classe (nombre entier) ; filiere : fili\u00e8re de la classe (entier, cl\u00e9 \u00e9trang\u00e8re faisant r\u00e9f\u00e9rence \u00e0 filieres.id ). Table eleves : id : identifiant (nombre entier, cl\u00e9 primaire) ; nom : nom de l'\u00e9l\u00e8ve (texte) ; prenom : pr\u00e9nom de l'\u00e9l\u00e8ve (texte) ; classe : classe de l'\u00e9l\u00e8ve (entier, cl\u00e9 \u00e9trang\u00e8re faisant r\u00e9f\u00e9rence \u00e0 classes.id ). Cr\u00e9ation des tables \u2693\ufe0e L'instruction SQL permettant de cr\u00e9er la table filieres est : var lycee = new Worker(path + \"/js/worker.sql-wasm.js\"); SQL CREATE TABLE filieres ( id INTEGER PRIMARY KEY AUTOINCREMENT, filiere TEXT ) Ex\u00e9cuter onElementLoaded(\"div#ide1\").then(() => { const ide = document.querySelector(\"div#ide1\"); load(ide, 'https:/nsimeyroneinc.github.io/TermNSI/01_lycee/lycee.db', '', '', lycee); }).catch(() => {}); Ex\u00e9cuter cette cellule puis afficher ci-dessous le contenu de la table filieres . Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide2\").then(() => { const ide = document.querySelector(\"div#ide2\"); load(ide, '/', '', '', lycee); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT * FROM filieres ; La requ\u00eate s'est ex\u00e9cut\u00e9e normalement mais on obtient aucune sortie car la table est vide ! Elle sera peupl\u00e9e plus bas. Cr\u00e9er la table classes . D\u00e9clarer une cl\u00e9 \u00e9trang\u00e8re La d\u00e9claration d'une cl\u00e9 \u00e9trang\u00e8re se fait ainsi : FOREIGN KEY (attribut) REFERENCES table_etrangere (attribut) . Dans le cas pr\u00e9sent, on rajoutera donc : FOREIGN KEY (filiere) REFERENCES filieres (id) . Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide3\").then(() => { const ide = document.querySelector(\"div#ide3\"); load(ide, '/', '', '', lycee); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL CREATE TABLE classes ( id INTEGER PRIMARY KEY AUTOINCREMENT , nom TEXT , niveau INTEGER , filiere INTEGER , FOREIGN KEY ( filiere ) REFERENCES filieres ( id ) ); Cr\u00e9er la table eleves . Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide4\").then(() => { const ide = document.querySelector(\"div#ide4\"); load(ide, '/', '', '', lycee); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL CREATE TABLE eleves ( id INTEGER PRIMARY KEY AUTOINCREMENT , nom TEXT , prenom TEXT , classe INTEGER , FOREIGN KEY ( classe ) REFERENCES classes ( id ) ); Peuplement des tables \u2693\ufe0e Les tables \u00e9tant cr\u00e9\u00e9es, il faut d\u00e9sormais les peupler. Nous utiliserons la structure suivante : \ud83d\uddc2\ufe0f Requ\u00eate SQL INSERT INTO table ( attribut_1 , attribut_2 , ...) VALUES ( valeur_1 , valeur_2 , ...), ( valeur_1 , valeur_2 , ...), ... Il ne faut bien entendu pas recopier les points de suspension ! Par exemple pour ins\u00e9rer les fili\u00e8res : SQL INSERT INTO filieres (filiere) VALUES (\"Seconde\"), (\"G\u00e9n\u00e9rale\"), (\"SI\"), (\"STI2D\") Ex\u00e9cuter onElementLoaded(\"div#ide5\").then(() => { const ide = document.querySelector(\"div#ide5\"); load(ide, '/', '', '', lycee); }).catch(() => {}); Ex\u00e9cuter cette cellule puis afficher ci-dessous le contenu de la table filieres . Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide6\").then(() => { const ide = document.querySelector(\"div#ide6\"); load(ide, '/', '', '', lycee); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT * FROM filieres ; Cette fois-ci on a bien un r\u00e9sultat. On se propose de cr\u00e9er trois classes : la Seconde 1, la Premi\u00e8re 2 (de fili\u00e8re \u00ab STI2D \u00bb), la Terminale 3 (de fili\u00e8re \u00ab G\u00e9n\u00e9rale \u00bb). Une classe est caract\u00e9ris\u00e9e par les attributs id , nom , niveau et filiere . L' id \u00e9tant la cl\u00e9 primaire et auto-incr\u00e9ment\u00e9e, elle est g\u00e9r\u00e9e automatiquement par le syst\u00e8me de gestion de la base de donn\u00e9es. Il n'est donc pas n\u00e9cessaire d'ins\u00e9rer les id . L'attribut filiere est quant \u00e0 lui une cl\u00e9 \u00e9trang\u00e8re . On ne peut donc pas utiliser la valeur 'STI2D' pour cet attribut lors de l'insertion de la Premi\u00e8re 2. Il faut utiliser la valeur correspondant \u00e0 la cl\u00e9 \u00e9trang\u00e8re de r\u00e9f\u00e9rence dans la table filieres . Si par exemple on constate que dans la table filieres , STI2D est associ\u00e9 \u00e0 l' id 4 on fera : INSERT INTO classes (nom, niveau, filiere) VALUES ('Premi\u00e8re 2', 1, 4) . On a fourni 4 comme valeur de l'attribut filiere . Ins\u00e9rer les valeurs dans la table classes . Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide7\").then(() => { const ide = document.querySelector(\"div#ide7\"); load(ide, '/', '', '', lycee); }).catch(() => {}); R\u00e9ponse On consid\u00e8re que la fili\u00e8re \u00ab Seconde \u00bb a pour id le 1 , 2 pour \u00ab G\u00e9n\u00e9rale \u00bb et 4 pour \u00ab STI2D \u00bb. \ud83d\uddc2\ufe0f Requ\u00eate SQL INSERT INTO classes ( nom , niveau , filiere ) VALUES ( \"Seconde 1\" , 2 , 1 ), ( \"Premi\u00e8re 2\" , 1 , 4 ), ( \"Terminale 3\" , 0 , 2 ); Ins\u00e9rer les \u00e9l\u00e8ves suivants dans la base : Nom Pr\u00e9nom Classe Faux Marc Terminale 3 Bidon Paul Premi\u00e8re 2 Fake Marie Seconde 1 False Isabelle Premi\u00e8re 2 Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide8\").then(() => { const ide = document.querySelector(\"div#ide8\"); load(ide, '/', '', '', lycee); }).catch(() => {}); R\u00e9ponse On consid\u00e8re que la classe \u00ab Seconde 1\" a pour id le 1 , 2 pour \u00ab Premi\u00e8re 2\" et 3 pour Terminale 3 . \ud83d\uddc2\ufe0f Requ\u00eate SQL INSERT INTO eleves ( nom , prenom , classe ) VALUES ( \"Faux\" , \"Marc\" , 3 ), ( \"Bidon\" , \"Paul\" , 2 ), ( \"Fake\" , \"Marie\" , 1 ), ( \"False\" , \"Isabelle\" , 2 ); Mise \u00e0 jour de valeurs \u2693\ufe0e Le proviseur du lyc\u00e9e souhaite changer la d\u00e9nomination des classes : il souhaite utiliser des lettres \u00e0 la place des num\u00e9ros. Il faut donc mettre \u00e0 jour les donn\u00e9es. La structure d'une instruction SQL de mise \u00e0 jour est : UPDATE table SET attribut = nouvelle_valeur WHERE condition . Par exemple, pour renommer la \u00ab Seconde 1\" en \u00ab Seconde A\" : SQL UPDATE classes SET nom = 'Seconde A' WHERE nom = 'Seconde 1' Ex\u00e9cuter onElementLoaded(\"div#ide9\").then(() => { const ide = document.querySelector(\"div#ide9\"); load(ide, '/', '', '', lycee); }).catch(() => {}); Mettre \u00e0 jour les autres noms de classes : \u00ab Premi\u00e8re 2\" devient \u00ab Premi\u00e8re B\", \u00ab Terminale 3\" devient \u00ab Terminale C\". Astuce Il est possible de saisir plusieurs instructions \u00e0 la suite en les s\u00e9parant avec un ; Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide10\").then(() => { const ide = document.querySelector(\"div#ide10\"); load(ide, '/', '', '', lycee); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL UPDATE classes SET nom = \"Premi\u00e8re B\" WHERE nom = \"Premi\u00e8re 2\" ; UPDATE classes SET nom = \"Terminale C\" WHERE nom = \"Terminale 3\" ;","title":"Lyc\u00e9e"},{"location":"01_lycee/lycee/#base-de-donnee-dun-lycee","text":"On souhaite cr\u00e9er une base de donn\u00e9e permettant de stocker les informations d\u00e9crivant les \u00e9l\u00e8ves d'un lyc\u00e9e ainsi que leur classe. Un \u00e9l\u00e8ve est d\u00e9crit par : un identifiant unique (un entier) ; son nom ; son pr\u00e9nom ; sa classe. Une classe est d\u00e9crite par : un identifiant unique (un entier) ; son nom (par exemple \u00ab Terminale 2 \u00bb) ; son niveau, nombre entier (2 pour les secondes, 1 pour les premi\u00e8res, 0 pour les terminales) ; sa fili\u00e8re (\u00ab G\u00e9n\u00e9rale \u00bb, \u00ab STI2D \u00bb, etc ...). Les classes de secondes seront dans la fili\u00e8re \u00ab Seconde \u00bb. Afin d'\u00e9viter les r\u00e9p\u00e9titions dans les tables, les informations sur les fili\u00e8res seront regroup\u00e9es dans une table s\u00e9par\u00e9e. La structure de la base est donc la suivante : Table filieres : id : identifiant (nombre entier, cl\u00e9 primaire) ; filiere : description de la fili\u00e8re (texte). Table classes : id : identifiant (nombre entier, cl\u00e9 primaire) ; nom : nom de la classe (texte) ; niveau : niveau de la classe (nombre entier) ; filiere : fili\u00e8re de la classe (entier, cl\u00e9 \u00e9trang\u00e8re faisant r\u00e9f\u00e9rence \u00e0 filieres.id ). Table eleves : id : identifiant (nombre entier, cl\u00e9 primaire) ; nom : nom de l'\u00e9l\u00e8ve (texte) ; prenom : pr\u00e9nom de l'\u00e9l\u00e8ve (texte) ; classe : classe de l'\u00e9l\u00e8ve (entier, cl\u00e9 \u00e9trang\u00e8re faisant r\u00e9f\u00e9rence \u00e0 classes.id ).","title":"Base de donn\u00e9e d'un lyc\u00e9e"},{"location":"02_imdb/imdb/","text":"Les notes des 250 meilleures s\u00e9ries selon IMDB \u2693\ufe0e Le jeu de donn\u00e9es disponible ici recense les notes attribu\u00e9es par les utilisateurs du site IMDB \u00e0 250 s\u00e9ries. Les deux fichiers CSV disponibles sur le site ont \u00e9t\u00e9 r\u00e9organis\u00e9s en trois fichiers : shows.csv : contient les informations d\u00e9crivant chacune des s\u00e9rie (son code et son titre, l'un et l'autre au format texte) global_ratings.csv : contient les notes attribu\u00e9es \u00e0 chaque s\u00e9rie ainsi que le nombre de votants. Les s\u00e9ries sont d\u00e9sign\u00e9es par un code faisant r\u00e9f\u00e9rence au code utilis\u00e9 dans le fichier pr\u00e9c\u00e9dent. Les notes sont des nombres d\u00e9cimaux et le nombre de votants des entiers. episode_ratings.csv : contient les notes attribu\u00e9es \u00e0 chaque \u00e9pisode de chaque saison de chaque s\u00e9rie. L\u00e0 encore, les s\u00e9ries sont d\u00e9sign\u00e9es par le code utilis\u00e9 dans le fichier shows.csv . Les num\u00e9ros de saison, d'\u00e9pisode sont des entiers. Les notes sont des nombres d\u00e9cimaux. La base de donn\u00e9es imdb_ratings est d\u00e9j\u00e0 cr\u00e9\u00e9e. Elle ne contient pour l'instant aucune table. Combien faut-il cr\u00e9er de tables ? Cocher la ou les bonne(s) r\u00e9ponse(s) Solution Une Deux Trois \u274c Une \u274c Deux \u2705 Trois. Il faut cr\u00e9er une table par fichier csv . [Spoiler Alert] La ou les table(s) \u00e0 utiliser Les tables utilis\u00e9es dans la suite de l'exercice sont les suivantes : shows reprend les attributs et le contenu du fichier shows.csv ; global reprend les attributs et le contenu du fichier global_ratings.csv episodes reprend les attributs et le contenu du fichier episode_ratings.csv Quelle est la cl\u00e9 primaire de la table shows correspondant au fichier show.csv ? Cocher la ou les bonne(s) r\u00e9ponse(s) Solution L'attribut code L'attribut title Les deux attributs coupl\u00e9s L'un ou l'autre des deux attributs... \u274c L'attribut code \u274c L'attribut title \u274c Les deux attributs coupl\u00e9s \u2705 L'un ou l'autre des deux attributs... Quelle est la cl\u00e9 primaire de la table global correspondant au fichier global_ratings.csv ? Cocher la ou les bonne(s) r\u00e9ponse(s) Solution L'attribut code L'attribut rating L'attribut rating_count \u2705 L'attribut code \u274c L'attribut rating \u274c L'attribut rating_count Quelle est la cl\u00e9 primaire de la table episodes correspondant au fichier episode_ratings.csv ? Cocher la ou les bonne(s) r\u00e9ponse(s) Solution L'attribut code L'attribut season L'attribut episode L'attribut rating Il faut utiliser une cl\u00e9 multiple \u274c L'attribut code \u274c L'attribut season \u274c L'attribut episode \u274c L'attribut rating \u2705 Il faut utiliser une cl\u00e9 multiple. La cl\u00e9 est form\u00e9e des attributs (code, season, episodes) Quelles sont les cl\u00e9s \u00e9trang\u00e8res pr\u00e9sentes dans cette base de donn\u00e9es ? (on d\u00e9signe les attributs au format table.attribut ) Cocher la ou les bonne(s) r\u00e9ponse(s) Solution L'attribut shows.code fait r\u00e9f\u00e9rence \u00e0 global.code L'attribut global.code fait r\u00e9f\u00e9rence \u00e0 shows.code L'attribut global.rating fait r\u00e9f\u00e9rence \u00e0 episodes.rating L'attribut episodes.code fait r\u00e9f\u00e9rence \u00e0 shows.code \u274c L'attribut shows.code fait r\u00e9f\u00e9rence \u00e0 global.code \u2705 L'attribut global.code fait r\u00e9f\u00e9rence \u00e0 shows.code \u274c L'attribut global.rating fait r\u00e9f\u00e9rence \u00e0 episodes.rating \u2705 L'attribut episodes.code fait r\u00e9f\u00e9rence \u00e0 shows.code Cr\u00e9er la table shows . Votre r\u00e9ponse var imdb = new Worker(path + \"/js/worker.sql-wasm.js\"); SQL Ex\u00e9cuter onElementLoaded(\"div#ide1\").then(() => { const ide = document.querySelector(\"div#ide1\"); load(ide, 'https:/nsimeyroneinc.github.io/TermNSI/02_imdb/imdb_ratings.db', '', '', imdb); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL CREATE TABLE shows ( code TEXT , title TEXT , PRIMARY KEY ( code ) ); Cr\u00e9er la table global . Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide2\").then(() => { const ide = document.querySelector(\"div#ide2\"); load(ide, '/', '', '', imdb); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL CREATE TABLE global ( code TEXT , rating REAL , rating_count INTEGER , PRIMARY KEY ( code ), FOREIGN KEY ( code ) REFERENCES shows ( code ) ); Cr\u00e9er la table episodes . Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide3\").then(() => { const ide = document.querySelector(\"div#ide3\"); load(ide, '/', '', '', imdb); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL CREATE TABLE episodes ( code TEXT , season INTEGER , episode INTEGER , rating REAL , PRIMARY KEY ( code , season , episode ), FOREIGN KEY ( code ) REFERENCES shows ( code ) ); Importer les dix premi\u00e8res s\u00e9ries dans dans la table shows . Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide4\").then(() => { const ide = document.querySelector(\"div#ide4\"); load(ide, '/', '', '', imdb); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL INSERT INTO shows VALUES ( \"tt0995832\" , \"Generation Kill\" ), ( \"tt0080306\" , \"Yes Minister\" ), ( \"tt7259746\" , \"Queer Eye\" ), ( \"tt0397150\" , \"Garth Marenghi's Darkplace\" ), ( \"tt0459159\" , \"The Thick of It\" ), ( \"tt9544034\" , \"The Family Man\" ), ( \"tt0314979\" , \"Battlestar Galactica\" ), ( \"tt0112159\" , \"Neon Genesis Evangelion\" ), ( \"tt8289930\" , \"Formula 1: Drive to Survive\" ), ( \"tt0877057\" , \"Death Note\" );","title":"S\u00e9ries"},{"location":"02_imdb/imdb/#les-notes-des-250-meilleures-series-selon-imdb","text":"Le jeu de donn\u00e9es disponible ici recense les notes attribu\u00e9es par les utilisateurs du site IMDB \u00e0 250 s\u00e9ries. Les deux fichiers CSV disponibles sur le site ont \u00e9t\u00e9 r\u00e9organis\u00e9s en trois fichiers : shows.csv : contient les informations d\u00e9crivant chacune des s\u00e9rie (son code et son titre, l'un et l'autre au format texte) global_ratings.csv : contient les notes attribu\u00e9es \u00e0 chaque s\u00e9rie ainsi que le nombre de votants. Les s\u00e9ries sont d\u00e9sign\u00e9es par un code faisant r\u00e9f\u00e9rence au code utilis\u00e9 dans le fichier pr\u00e9c\u00e9dent. Les notes sont des nombres d\u00e9cimaux et le nombre de votants des entiers. episode_ratings.csv : contient les notes attribu\u00e9es \u00e0 chaque \u00e9pisode de chaque saison de chaque s\u00e9rie. L\u00e0 encore, les s\u00e9ries sont d\u00e9sign\u00e9es par le code utilis\u00e9 dans le fichier shows.csv . Les num\u00e9ros de saison, d'\u00e9pisode sont des entiers. Les notes sont des nombres d\u00e9cimaux. La base de donn\u00e9es imdb_ratings est d\u00e9j\u00e0 cr\u00e9\u00e9e. Elle ne contient pour l'instant aucune table. Combien faut-il cr\u00e9er de tables ? Cocher la ou les bonne(s) r\u00e9ponse(s) Solution Une Deux Trois \u274c Une \u274c Deux \u2705 Trois. Il faut cr\u00e9er une table par fichier csv . [Spoiler Alert] La ou les table(s) \u00e0 utiliser Les tables utilis\u00e9es dans la suite de l'exercice sont les suivantes : shows reprend les attributs et le contenu du fichier shows.csv ; global reprend les attributs et le contenu du fichier global_ratings.csv episodes reprend les attributs et le contenu du fichier episode_ratings.csv Quelle est la cl\u00e9 primaire de la table shows correspondant au fichier show.csv ? Cocher la ou les bonne(s) r\u00e9ponse(s) Solution L'attribut code L'attribut title Les deux attributs coupl\u00e9s L'un ou l'autre des deux attributs... \u274c L'attribut code \u274c L'attribut title \u274c Les deux attributs coupl\u00e9s \u2705 L'un ou l'autre des deux attributs... Quelle est la cl\u00e9 primaire de la table global correspondant au fichier global_ratings.csv ? Cocher la ou les bonne(s) r\u00e9ponse(s) Solution L'attribut code L'attribut rating L'attribut rating_count \u2705 L'attribut code \u274c L'attribut rating \u274c L'attribut rating_count Quelle est la cl\u00e9 primaire de la table episodes correspondant au fichier episode_ratings.csv ? Cocher la ou les bonne(s) r\u00e9ponse(s) Solution L'attribut code L'attribut season L'attribut episode L'attribut rating Il faut utiliser une cl\u00e9 multiple \u274c L'attribut code \u274c L'attribut season \u274c L'attribut episode \u274c L'attribut rating \u2705 Il faut utiliser une cl\u00e9 multiple. La cl\u00e9 est form\u00e9e des attributs (code, season, episodes) Quelles sont les cl\u00e9s \u00e9trang\u00e8res pr\u00e9sentes dans cette base de donn\u00e9es ? (on d\u00e9signe les attributs au format table.attribut ) Cocher la ou les bonne(s) r\u00e9ponse(s) Solution L'attribut shows.code fait r\u00e9f\u00e9rence \u00e0 global.code L'attribut global.code fait r\u00e9f\u00e9rence \u00e0 shows.code L'attribut global.rating fait r\u00e9f\u00e9rence \u00e0 episodes.rating L'attribut episodes.code fait r\u00e9f\u00e9rence \u00e0 shows.code \u274c L'attribut shows.code fait r\u00e9f\u00e9rence \u00e0 global.code \u2705 L'attribut global.code fait r\u00e9f\u00e9rence \u00e0 shows.code \u274c L'attribut global.rating fait r\u00e9f\u00e9rence \u00e0 episodes.rating \u2705 L'attribut episodes.code fait r\u00e9f\u00e9rence \u00e0 shows.code Cr\u00e9er la table shows . Votre r\u00e9ponse var imdb = new Worker(path + \"/js/worker.sql-wasm.js\"); SQL Ex\u00e9cuter onElementLoaded(\"div#ide1\").then(() => { const ide = document.querySelector(\"div#ide1\"); load(ide, 'https:/nsimeyroneinc.github.io/TermNSI/02_imdb/imdb_ratings.db', '', '', imdb); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL CREATE TABLE shows ( code TEXT , title TEXT , PRIMARY KEY ( code ) ); Cr\u00e9er la table global . Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide2\").then(() => { const ide = document.querySelector(\"div#ide2\"); load(ide, '/', '', '', imdb); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL CREATE TABLE global ( code TEXT , rating REAL , rating_count INTEGER , PRIMARY KEY ( code ), FOREIGN KEY ( code ) REFERENCES shows ( code ) ); Cr\u00e9er la table episodes . Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide3\").then(() => { const ide = document.querySelector(\"div#ide3\"); load(ide, '/', '', '', imdb); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL CREATE TABLE episodes ( code TEXT , season INTEGER , episode INTEGER , rating REAL , PRIMARY KEY ( code , season , episode ), FOREIGN KEY ( code ) REFERENCES shows ( code ) ); Importer les dix premi\u00e8res s\u00e9ries dans dans la table shows . Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide4\").then(() => { const ide = document.querySelector(\"div#ide4\"); load(ide, '/', '', '', imdb); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL INSERT INTO shows VALUES ( \"tt0995832\" , \"Generation Kill\" ), ( \"tt0080306\" , \"Yes Minister\" ), ( \"tt7259746\" , \"Queer Eye\" ), ( \"tt0397150\" , \"Garth Marenghi's Darkplace\" ), ( \"tt0459159\" , \"The Thick of It\" ), ( \"tt9544034\" , \"The Family Man\" ), ( \"tt0314979\" , \"Battlestar Galactica\" ), ( \"tt0112159\" , \"Neon Genesis Evangelion\" ), ( \"tt8289930\" , \"Formula 1: Drive to Survive\" ), ( \"tt0877057\" , \"Death Note\" );","title":"Les notes des 250 meilleures s\u00e9ries selon IMDB"},{"location":"31_prenoms/prenoms/","text":"Les pr\u00e9noms en France au XX-\u00e8me si\u00e8cle \u2693\ufe0e On consid\u00e8re dans ce sujet la base de donn\u00e9es prenoms . Cette base ne comporte qu'une table, naissances , qui contient des informations d\u00e9crivant des pr\u00e9noms des enfants n\u00e9s en France au XX-i\u00e8me si\u00e8cle. Cette base est t\u00e9l\u00e9chargeable au format sqlite ici . Les attributs de cette table sont : id : l'identifiant de l'entr\u00e9e (cl\u00e9 primaire); sexe : le sexe de l'enfant au format texte : Fille ou Gar\u00e7on ; prenom : le pr\u00e9nom de l'enfant en lettres majuscules ; annee_naissance : l'ann\u00e9e de naissance (nombre entier) ; nombre : le nombre d'enfants n\u00e9s durant l'ann\u00e9e en question et portant ce pr\u00e9nom. On rappelle que la structure g\u00e9n\u00e9rale d'une requ\u00eate SQL est : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT attribut_1 , attribut_2 , ... FROM table WHERE condition ; Toutefois : il est possible d'obtenir tous les attributs en faisant SELECT * ; la condition WHERE condition n'est pas indispensable si l'on souhaite obtenir toutes les entr\u00e9es de la table. On peut alors se contenter de SELECT attributs FROM table ; il est possible de rajouter d'autres arguments qui seront pr\u00e9sent\u00e9s au fil de ce document. Afficher les dix premi\u00e8res lignes de la table. Astuce Utiliser LIMIT 10 \u00e0 la fin de la requ\u00eate afin de n'afficher que les 10 premiers r\u00e9sultats. Il y a beaucoup de lignes dans cette table ! Votre r\u00e9ponse var prenoms = new Worker(path + \"/js/worker.sql-wasm.js\"); SQL Ex\u00e9cuter onElementLoaded(\"div#ide1\").then(() => { const ide = document.querySelector(\"div#ide1\"); load(ide, 'https:/nsimeyroneinc.github.io/TermNSI/31_prenoms/prenoms.db', '', '', prenoms); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT * FROM naissances LIMIT 10 ; Afficher les lignes correspondant \u00e0 l'ann\u00e9e 1923. L\u00e0 encore, mieux vaut ne demander que les 10 premi\u00e8res lignes... Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide2\").then(() => { const ide = document.querySelector(\"div#ide2\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse On peut faire : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT * FROM naissances WHERE annee_naissance = 1923 ; Ou, en limitant le nombre de r\u00e9ponses : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT * FROM naissances WHERE annee_naissance = 1923 LIMIT 10 ; Afficher les pr\u00e9noms des filles n\u00e9es en 1978. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide3\").then(() => { const ide = document.querySelector(\"div#ide3\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT prenom FROM naissances WHERE sexe = 'Fille' AND annee_naissance = 1978 ; Combien de fois le pr\u00e9nom Nicolas a-t-il \u00e9t\u00e9 donn\u00e9 en 1907 ? Astuce On fera attention aux majuscules ! Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide4\").then(() => { const ide = document.querySelector(\"div#ide4\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT sexe , nombre FROM naissances WHERE prenom = 'NICOLAS' AND annee_naissance = 1907 ; On obtient deux lignes car Nicolas peut aussi \u00eatre un pr\u00e9nom de fille ! On peut aussi utiliser la fonction d'aggr\u00e9ation sum() : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT sum ( nombre ) FROM naissances WHERE prenom = 'NICOLAS' AND annee_naissance = 1907 ; Afficher les 10 pr\u00e9noms de fille les plus donn\u00e9s en 1978 rang\u00e9s dans l'ordre d\u00e9croissant du nombre de fois o\u00f9 ils ont \u00e9t\u00e9 donn\u00e9s. Astuce On peut trier les r\u00e9sultats en ajoutant ORDER BY attribut ASC en fin de requ\u00eate. ASC signifie ASCENDING et donc l'ordre croissant. On utilise DESC pour l'ordre d\u00e9croissant. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide5\").then(() => { const ide = document.querySelector(\"div#ide5\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT prenom FROM naissances WHERE sexe = 'Fille' AND annee_naissance = 1978 ORDER BY nombre DESC LIMIT 10 ; Afficher les lignes des pr\u00e9noms de gar\u00e7ons donn\u00e9s entre 1960 et 1969 (inclus l'un et l'autre). Utiliser un AND pour tester l'encadrement des ann\u00e9es. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide6\").then(() => { const ide = document.querySelector(\"div#ide6\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT * FROM naissances WHERE sexe = 'Gar\u00e7on' AND annee_naissance >= 1960 AND annee_naissance <= 1969 ; Il est int\u00e9ressant de remarquer au passage que la condition 1960 <= annee_naissance <= 1969 ne renvoie pas le m\u00eame r\u00e9sultat. Afficher le nombre de pr\u00e9noms diff\u00e9rents de gar\u00e7ons donn\u00e9s en 1938. Coup de pouce On pourra utiliser la fonction COUNT . Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide7\").then(() => { const ide = document.querySelector(\"div#ide7\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT COUNT ( * ) as differents FROM naissances WHERE sexe = 'Gar\u00e7on' AND annee_naissance = 1938 ; Le as differents est un alias, il permet de renommer un attribut ou un r\u00e9sultat (ici le d\u00e9compte total). Afficher le nombre de naissances de gar\u00e7ons observ\u00e9es en 1938. Coup de pouce Utiliser la fonction SUM afin d'additionner les nombres d'enfants portant chaque pr\u00e9nom. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide8\").then(() => { const ide = document.querySelector(\"div#ide8\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT SUM ( nombre ) FROM naissances WHERE sexe = 'Gar\u00e7on' AND annee_naissance = 1938 ; Afficher le nombre de filles et le nombre de gar\u00e7ons apparaissant dans le table. Coup de pouce Il faut sommer des valeurs et les regrouper selon le sexe de l'enfant. On utilise pour cela l'instruction GROUP BY . Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide9\").then(() => { const ide = document.querySelector(\"div#ide9\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT sexe , SUM ( nombre ) FROM naissances GROUP BY sexe ; Quel est le pr\u00e9nom, pour un certain sexe, en distinguant par exemple \"Camille (fille)\" et \"Camille (gar\u00e7on)\", qui a \u00e9t\u00e9 le plus donn\u00e9 durant une ann\u00e9e donn\u00e9e ? En quelle ann\u00e9e ? Astuce Utilisez une requ\u00eate de la forme : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT ..., ..., ..., nombre FROM naissances ORDER BY ... DESC LIMIT ...; Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide10\").then(() => { const ide = document.querySelector(\"div#ide10\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse On peut saisir : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT sexe , prenom , annee_naissance , nombre FROM naissances ORDER BY nombre DESC LIMIT 1 ; Une autre approche est d'utiliser deux requ\u00eates imbriqu\u00e9es : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT sexe , prenom , annee_naissance , nombre FROM naissances WHERE nombre = ( SELECT MAX ( nombre ) FROM naissances ); Notons enfin que sqlite autorise cette approche : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT sexe , prenom , annee_naissance , MAX ( nombre ) FROM naissances ; Cette instruction risque n\u00e9anmoins de ne pas s'ex\u00e9cuter dans d'autres syst\u00e8mes de gestion de bases de donn\u00e9es. En quelle ann\u00e9e y-a-t-il eu le plus de naissances ? Astuce Regrouper les r\u00e9sultats par ann\u00e9e, les trier et n'afficher que le premier ! Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide11\").then(() => { const ide = document.querySelector(\"div#ide11\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT annee_naissance , SUM ( nombre ) as somme FROM naissances GROUP BY annee_naissance ORDER BY somme DESC LIMIT 1 ; Quels sont les 10 pr\u00e9noms les plus donn\u00e9s en France au cours du XX-\u00e8me si\u00e8cle ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide12\").then(() => { const ide = document.querySelector(\"div#ide12\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT prenom , SUM ( nombre ) as nb FROM naissances GROUP BY prenom ORDER BY nb DESC LIMIT 10 ;","title":"Pr\u00e9noms"},{"location":"31_prenoms/prenoms/#les-prenoms-en-france-au-xx-eme-siecle","text":"On consid\u00e8re dans ce sujet la base de donn\u00e9es prenoms . Cette base ne comporte qu'une table, naissances , qui contient des informations d\u00e9crivant des pr\u00e9noms des enfants n\u00e9s en France au XX-i\u00e8me si\u00e8cle. Cette base est t\u00e9l\u00e9chargeable au format sqlite ici . Les attributs de cette table sont : id : l'identifiant de l'entr\u00e9e (cl\u00e9 primaire); sexe : le sexe de l'enfant au format texte : Fille ou Gar\u00e7on ; prenom : le pr\u00e9nom de l'enfant en lettres majuscules ; annee_naissance : l'ann\u00e9e de naissance (nombre entier) ; nombre : le nombre d'enfants n\u00e9s durant l'ann\u00e9e en question et portant ce pr\u00e9nom. On rappelle que la structure g\u00e9n\u00e9rale d'une requ\u00eate SQL est : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT attribut_1 , attribut_2 , ... FROM table WHERE condition ; Toutefois : il est possible d'obtenir tous les attributs en faisant SELECT * ; la condition WHERE condition n'est pas indispensable si l'on souhaite obtenir toutes les entr\u00e9es de la table. On peut alors se contenter de SELECT attributs FROM table ; il est possible de rajouter d'autres arguments qui seront pr\u00e9sent\u00e9s au fil de ce document. Afficher les dix premi\u00e8res lignes de la table. Astuce Utiliser LIMIT 10 \u00e0 la fin de la requ\u00eate afin de n'afficher que les 10 premiers r\u00e9sultats. Il y a beaucoup de lignes dans cette table ! Votre r\u00e9ponse var prenoms = new Worker(path + \"/js/worker.sql-wasm.js\"); SQL Ex\u00e9cuter onElementLoaded(\"div#ide1\").then(() => { const ide = document.querySelector(\"div#ide1\"); load(ide, 'https:/nsimeyroneinc.github.io/TermNSI/31_prenoms/prenoms.db', '', '', prenoms); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT * FROM naissances LIMIT 10 ; Afficher les lignes correspondant \u00e0 l'ann\u00e9e 1923. L\u00e0 encore, mieux vaut ne demander que les 10 premi\u00e8res lignes... Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide2\").then(() => { const ide = document.querySelector(\"div#ide2\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse On peut faire : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT * FROM naissances WHERE annee_naissance = 1923 ; Ou, en limitant le nombre de r\u00e9ponses : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT * FROM naissances WHERE annee_naissance = 1923 LIMIT 10 ; Afficher les pr\u00e9noms des filles n\u00e9es en 1978. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide3\").then(() => { const ide = document.querySelector(\"div#ide3\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT prenom FROM naissances WHERE sexe = 'Fille' AND annee_naissance = 1978 ; Combien de fois le pr\u00e9nom Nicolas a-t-il \u00e9t\u00e9 donn\u00e9 en 1907 ? Astuce On fera attention aux majuscules ! Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide4\").then(() => { const ide = document.querySelector(\"div#ide4\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT sexe , nombre FROM naissances WHERE prenom = 'NICOLAS' AND annee_naissance = 1907 ; On obtient deux lignes car Nicolas peut aussi \u00eatre un pr\u00e9nom de fille ! On peut aussi utiliser la fonction d'aggr\u00e9ation sum() : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT sum ( nombre ) FROM naissances WHERE prenom = 'NICOLAS' AND annee_naissance = 1907 ; Afficher les 10 pr\u00e9noms de fille les plus donn\u00e9s en 1978 rang\u00e9s dans l'ordre d\u00e9croissant du nombre de fois o\u00f9 ils ont \u00e9t\u00e9 donn\u00e9s. Astuce On peut trier les r\u00e9sultats en ajoutant ORDER BY attribut ASC en fin de requ\u00eate. ASC signifie ASCENDING et donc l'ordre croissant. On utilise DESC pour l'ordre d\u00e9croissant. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide5\").then(() => { const ide = document.querySelector(\"div#ide5\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT prenom FROM naissances WHERE sexe = 'Fille' AND annee_naissance = 1978 ORDER BY nombre DESC LIMIT 10 ; Afficher les lignes des pr\u00e9noms de gar\u00e7ons donn\u00e9s entre 1960 et 1969 (inclus l'un et l'autre). Utiliser un AND pour tester l'encadrement des ann\u00e9es. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide6\").then(() => { const ide = document.querySelector(\"div#ide6\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT * FROM naissances WHERE sexe = 'Gar\u00e7on' AND annee_naissance >= 1960 AND annee_naissance <= 1969 ; Il est int\u00e9ressant de remarquer au passage que la condition 1960 <= annee_naissance <= 1969 ne renvoie pas le m\u00eame r\u00e9sultat. Afficher le nombre de pr\u00e9noms diff\u00e9rents de gar\u00e7ons donn\u00e9s en 1938. Coup de pouce On pourra utiliser la fonction COUNT . Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide7\").then(() => { const ide = document.querySelector(\"div#ide7\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT COUNT ( * ) as differents FROM naissances WHERE sexe = 'Gar\u00e7on' AND annee_naissance = 1938 ; Le as differents est un alias, il permet de renommer un attribut ou un r\u00e9sultat (ici le d\u00e9compte total). Afficher le nombre de naissances de gar\u00e7ons observ\u00e9es en 1938. Coup de pouce Utiliser la fonction SUM afin d'additionner les nombres d'enfants portant chaque pr\u00e9nom. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide8\").then(() => { const ide = document.querySelector(\"div#ide8\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT SUM ( nombre ) FROM naissances WHERE sexe = 'Gar\u00e7on' AND annee_naissance = 1938 ; Afficher le nombre de filles et le nombre de gar\u00e7ons apparaissant dans le table. Coup de pouce Il faut sommer des valeurs et les regrouper selon le sexe de l'enfant. On utilise pour cela l'instruction GROUP BY . Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide9\").then(() => { const ide = document.querySelector(\"div#ide9\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT sexe , SUM ( nombre ) FROM naissances GROUP BY sexe ; Quel est le pr\u00e9nom, pour un certain sexe, en distinguant par exemple \"Camille (fille)\" et \"Camille (gar\u00e7on)\", qui a \u00e9t\u00e9 le plus donn\u00e9 durant une ann\u00e9e donn\u00e9e ? En quelle ann\u00e9e ? Astuce Utilisez une requ\u00eate de la forme : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT ..., ..., ..., nombre FROM naissances ORDER BY ... DESC LIMIT ...; Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide10\").then(() => { const ide = document.querySelector(\"div#ide10\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse On peut saisir : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT sexe , prenom , annee_naissance , nombre FROM naissances ORDER BY nombre DESC LIMIT 1 ; Une autre approche est d'utiliser deux requ\u00eates imbriqu\u00e9es : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT sexe , prenom , annee_naissance , nombre FROM naissances WHERE nombre = ( SELECT MAX ( nombre ) FROM naissances ); Notons enfin que sqlite autorise cette approche : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT sexe , prenom , annee_naissance , MAX ( nombre ) FROM naissances ; Cette instruction risque n\u00e9anmoins de ne pas s'ex\u00e9cuter dans d'autres syst\u00e8mes de gestion de bases de donn\u00e9es. En quelle ann\u00e9e y-a-t-il eu le plus de naissances ? Astuce Regrouper les r\u00e9sultats par ann\u00e9e, les trier et n'afficher que le premier ! Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide11\").then(() => { const ide = document.querySelector(\"div#ide11\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT annee_naissance , SUM ( nombre ) as somme FROM naissances GROUP BY annee_naissance ORDER BY somme DESC LIMIT 1 ; Quels sont les 10 pr\u00e9noms les plus donn\u00e9s en France au cours du XX-\u00e8me si\u00e8cle ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide12\").then(() => { const ide = document.querySelector(\"div#ide12\"); load(ide, '/', '', '', prenoms); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT prenom , SUM ( nombre ) as nb FROM naissances GROUP BY prenom ORDER BY nb DESC LIMIT 10 ;","title":"Les pr\u00e9noms en France au XX-\u00e8me si\u00e8cle"},{"location":"32_ramens/ramens/","text":"Notation de ramens \u2693\ufe0e Le site www.theramenrater.com propose un fichier csv reprenant les notes donn\u00e9es par son cr\u00e9ateur \u00e0 de nombreux r\u0101mens , ces nouilles servies dans du bouillon au Japon. On s'int\u00e9resse ici \u00e0 la base de donn\u00e9es notations_ramens associ\u00e9e. Cette base ne comprend qu'une table, ramens , dont les attributs sont : id : l'identifiant de l'entr\u00e9e (cl\u00e9 primaire) ; brand : la marque des r\u0101mens au format texte ; variety : le type de r\u0101mens au format texte ; style : le style des r\u0101mens ' au format texte ( Cup , Pack , Bowl ...) ; country : le pays producteur au format texte ; stars : la note (nombre d\u00e9cimal). Cette base est t\u00e9l\u00e9chargeable au format sqlite ici . Combien de r\u0101mens sont not\u00e9s ? Votre r\u00e9ponse var ramens = new Worker(path + \"/js/worker.sql-wasm.js\"); SQL Ex\u00e9cuter onElementLoaded(\"div#ide1\").then(() => { const ide = document.querySelector(\"div#ide1\"); load(ide, 'https:/nsimeyroneinc.github.io/TermNSI/32_ramens/notations_ramens.db', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT COUNT ( * ) FROM ramens ; Combien de r\u0101mens ont \u00e9t\u00e9 produits au Japon ( Japan dans la table) ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide2\").then(() => { const ide = document.querySelector(\"div#ide2\"); load(ide, '/', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT COUNT ( * ) FROM ramens WHERE country = 'Japan' ; Afficher les notes des r\u0101mens produits en Espagne ( Spain dans la table). Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide3\").then(() => { const ide = document.querySelector(\"div#ide3\"); load(ide, '/', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT stars FROM ramens WHERE country = 'Spain' ; Afficher les notes des r\u0101mens produits au Br\u00e9sil ou au P\u00e9rou ( Brazil et Peru ) ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide4\").then(() => { const ide = document.querySelector(\"div#ide4\"); load(ide, '/', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT stars FROM ramens WHERE country = 'Brazil' OR country = 'Peru' ; Combien de r\u0101mens ont \u00e9t\u00e9 produits par la marque \u00ab Sapporo Ichiban \u00bb ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide5\").then(() => { const ide = document.querySelector(\"div#ide5\"); load(ide, '/', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT COUNT ( * ) FROM ramens WHERE brand = 'Sapporo Ichiban' ; Afficher le nombre de r\u0101mens que produit chaque marque. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide6\").then(() => { const ide = document.querySelector(\"div#ide6\"); load(ide, '/', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT brand , COUNT ( * ) FROM ramens GROUP BY brand ; Afficher les marques des r\u0101mens servis dans des bols. On donnera les cinq premiers r\u00e9sultats dans l'ordre alphab\u00e9tique. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide7\").then(() => { const ide = document.querySelector(\"div#ide7\"); load(ide, '/', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT brand FROM ramens WHERE style = 'Bowl' GROUP BY brand ORDER BY brand ASC LIMIT 5 ; Quelle est la note maximale donn\u00e9e ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide8\").then(() => { const ide = document.querySelector(\"div#ide8\"); load(ide, '/', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT MAX ( stars ) FROM ramens ; Quelle est la note moyenne de toutes les \u00e9valuations ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide9\").then(() => { const ide = document.querySelector(\"div#ide9\"); load(ide, '/', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT AVG ( stars ) FROM ramens ; Combien de r\u0101mens am\u00e9ricains ont une note sup\u00e9rieure \u00e0 4 (inclus) ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide10\").then(() => { const ide = document.querySelector(\"div#ide10\"); load(ide, '/', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT COUNT ( * ) FROM ramens WHERE country = 'United States' AND stars >= 4 ; Classer les pays selon la note moyenne des r\u0101mens produits. On triera les r\u00e9sultats dans l'ordre d\u00e9croissant. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide11\").then(() => { const ide = document.querySelector(\"div#ide11\"); load(ide, '/', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT country , AVG ( stars ) as moyenne FROM ramens GROUP BY country ORDER BY moyenne DESC ;","title":"Ramens"},{"location":"32_ramens/ramens/#notation-de-ramens","text":"Le site www.theramenrater.com propose un fichier csv reprenant les notes donn\u00e9es par son cr\u00e9ateur \u00e0 de nombreux r\u0101mens , ces nouilles servies dans du bouillon au Japon. On s'int\u00e9resse ici \u00e0 la base de donn\u00e9es notations_ramens associ\u00e9e. Cette base ne comprend qu'une table, ramens , dont les attributs sont : id : l'identifiant de l'entr\u00e9e (cl\u00e9 primaire) ; brand : la marque des r\u0101mens au format texte ; variety : le type de r\u0101mens au format texte ; style : le style des r\u0101mens ' au format texte ( Cup , Pack , Bowl ...) ; country : le pays producteur au format texte ; stars : la note (nombre d\u00e9cimal). Cette base est t\u00e9l\u00e9chargeable au format sqlite ici . Combien de r\u0101mens sont not\u00e9s ? Votre r\u00e9ponse var ramens = new Worker(path + \"/js/worker.sql-wasm.js\"); SQL Ex\u00e9cuter onElementLoaded(\"div#ide1\").then(() => { const ide = document.querySelector(\"div#ide1\"); load(ide, 'https:/nsimeyroneinc.github.io/TermNSI/32_ramens/notations_ramens.db', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT COUNT ( * ) FROM ramens ; Combien de r\u0101mens ont \u00e9t\u00e9 produits au Japon ( Japan dans la table) ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide2\").then(() => { const ide = document.querySelector(\"div#ide2\"); load(ide, '/', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT COUNT ( * ) FROM ramens WHERE country = 'Japan' ; Afficher les notes des r\u0101mens produits en Espagne ( Spain dans la table). Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide3\").then(() => { const ide = document.querySelector(\"div#ide3\"); load(ide, '/', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT stars FROM ramens WHERE country = 'Spain' ; Afficher les notes des r\u0101mens produits au Br\u00e9sil ou au P\u00e9rou ( Brazil et Peru ) ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide4\").then(() => { const ide = document.querySelector(\"div#ide4\"); load(ide, '/', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT stars FROM ramens WHERE country = 'Brazil' OR country = 'Peru' ; Combien de r\u0101mens ont \u00e9t\u00e9 produits par la marque \u00ab Sapporo Ichiban \u00bb ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide5\").then(() => { const ide = document.querySelector(\"div#ide5\"); load(ide, '/', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT COUNT ( * ) FROM ramens WHERE brand = 'Sapporo Ichiban' ; Afficher le nombre de r\u0101mens que produit chaque marque. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide6\").then(() => { const ide = document.querySelector(\"div#ide6\"); load(ide, '/', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT brand , COUNT ( * ) FROM ramens GROUP BY brand ; Afficher les marques des r\u0101mens servis dans des bols. On donnera les cinq premiers r\u00e9sultats dans l'ordre alphab\u00e9tique. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide7\").then(() => { const ide = document.querySelector(\"div#ide7\"); load(ide, '/', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT brand FROM ramens WHERE style = 'Bowl' GROUP BY brand ORDER BY brand ASC LIMIT 5 ; Quelle est la note maximale donn\u00e9e ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide8\").then(() => { const ide = document.querySelector(\"div#ide8\"); load(ide, '/', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT MAX ( stars ) FROM ramens ; Quelle est la note moyenne de toutes les \u00e9valuations ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide9\").then(() => { const ide = document.querySelector(\"div#ide9\"); load(ide, '/', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT AVG ( stars ) FROM ramens ; Combien de r\u0101mens am\u00e9ricains ont une note sup\u00e9rieure \u00e0 4 (inclus) ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide10\").then(() => { const ide = document.querySelector(\"div#ide10\"); load(ide, '/', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT COUNT ( * ) FROM ramens WHERE country = 'United States' AND stars >= 4 ; Classer les pays selon la note moyenne des r\u0101mens produits. On triera les r\u00e9sultats dans l'ordre d\u00e9croissant. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide11\").then(() => { const ide = document.querySelector(\"div#ide11\"); load(ide, '/', '', '', ramens); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT country , AVG ( stars ) as moyenne FROM ramens GROUP BY country ORDER BY moyenne DESC ;","title":"Notation de ramens"},{"location":"41_films/films/","text":"Autour des films \u2693\ufe0e On s'int\u00e9resse ici \u00e0 la base de donn\u00e9es films regroupant diverses informations sur des films : titre, ann\u00e9e de r\u00e9alisation, nom du r\u00e9alisateur, r\u00e9sum\u00e9, nom et r\u00f4le des acteurs, note attribu\u00e9e par des internautes, etc ... Les diff\u00e9rentes tables sont repr\u00e9sent\u00e9es ci-dessous : Sur cette figure : chaque tableau correspond \u00e0 une table dont le nom est indiqu\u00e9 sur la premi\u00e8re ligne ; les lignes suivantes listent les attributs et leur type. varchar(255) signifie que l'attribut est un texte de 255 caract\u00e8res au maximum ; les cl\u00e9s primaires de chaque table sont indiqu\u00e9es en gras. Notez que la table roles a une cl\u00e9 primaire multiple ; les cl\u00e9s \u00e9trang\u00e8res sont repr\u00e9sent\u00e9es par des liaisons entre les tables. On ne d\u00e9taille pas ici la signification des nombres et des symboles aux extr\u00e9mit\u00e9s des liaisons. Les curieux pourront se reporter \u00e0 cette page . Cette base est t\u00e9l\u00e9chargeable au format sqlite ici . La source est l\u00e0 . Le fichier d'origine a \u00e9t\u00e9 compl\u00e9t\u00e9 par nos soins. Ainsi, les internautes et les notes associ\u00e9es sont des faux . En deux temps... \u2693\ufe0e Combien de films sont pr\u00e9sents dans la base ? Votre r\u00e9ponse var films = new Worker(path + \"/js/worker.sql-wasm.js\"); SQL Ex\u00e9cuter onElementLoaded(\"div#ide1\").then(() => { const ide = document.querySelector(\"div#ide1\"); load(ide, 'https:/nsimeyroneinc.github.io/TermNSI/41_films/films.db', '', '', films); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT COUNT ( * ) FROM films ; Quel est l' idRealisateur du film \u00ab Casablanca \u00bb ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide2\").then(() => { const ide = document.querySelector(\"div#ide2\"); load(ide, '/', '', '', films); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT idRealisateur FROM films WHERE titre = 'Casablanca' ; Quels sont les noms et pr\u00e9noms de ce r\u00e9alisateur ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide3\").then(() => { const ide = document.querySelector(\"div#ide3\"); load(ide, '/', '', '', films); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT nom , prenom FROM artistes WHERE idArtiste = 4109 ; Tout \u00e0 la fois ! \u2693\ufe0e Comme on peut le voir, la question \u00ab Quel est le nom du films Casablanca ? \u00bb n\u00e9cessite d'effectuer deux requ\u00eates. Les informations sont en effet r\u00e9parties sur deux tables. Il est possible de n'effectuer qu'une seule requ\u00eate en effectuant une jointure . Cette op\u00e9ration s'appuie sur les cl\u00e9s \u00e9trang\u00e8res des tables et permet de mettre deux attributs en correspondance. La structure g\u00e9n\u00e9rale d'une jointure est : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT attribut FROM table_1 JOIN table_2 ON table_1 . attribut_1 = table_2 . attribut_2 ; Plusieurs remarques : on a pr\u00e9cis\u00e9 l'origine des attributs afin d'\u00e9viter les ambigu\u00eft\u00e9s si deux attributs de deux tables diff\u00e9rentes ont le m\u00eame nom. Ce n'est pas n\u00e9cessaire s'il n'y a pas d'ambigu\u00eft\u00e9 ; il est possible de joindre d'autres tables en rajoutant des lignes JOIN table_3 ... ; on peut tout \u00e0 fait ajouter une clause WHERE \u00e0 la suite des jointures ; les attributs demand\u00e9s peuvent provenir de toutes les tables jointes SELECT table_1.attribut_1, table_2.attribut_2 . Utilisez une jointure afin de retrouver le nom et le pr\u00e9nom du r\u00e9alisateur de \u00ab Casablanca \u00bb. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide4\").then(() => { const ide = document.querySelector(\"div#ide4\"); load(ide, '/', '', '', films); }).catch(() => {}); R\u00e9ponse On peut indiff\u00e9remment partir de la table artistes : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT artistes . nom , artistes . prenom FROM artistes JOIN films ON films . idRealisateur = artistes . idArtiste WHERE films . titre = 'Casablanca' ; ou films : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT artistes . nom , artistes . prenom FROM films JOIN artistes ON films . idRealisateur = artistes . idArtiste WHERE films . titre = 'Casablanca' ; Qui est le r\u00e9alisateur de \u00ab Memento \u00bb ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide5\").then(() => { const ide = document.querySelector(\"div#ide5\"); load(ide, '/', '', '', films); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT artistes . nom , artistes . prenom FROM artistes JOIN films ON films . idRealisateur = artistes . idArtiste WHERE films . titre = 'Memento' ; Quel acteur a jou\u00e9 le r\u00f4le de \u00ab Chewbacca \u00bb ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide6\").then(() => { const ide = document.querySelector(\"div#ide6\"); load(ide, '/', '', '', films); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT artistes . nom , artistes . prenom FROM artistes JOIN roles ON roles . idActeur = artistes . idArtiste WHERE roles . nomRole = 'Chewbacca' ; Quelles notes a obtenu le film \u00ab Fargo \u00bb ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide7\").then(() => { const ide = document.querySelector(\"div#ide7\"); load(ide, '/', '', '', films); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT note FROM notes JOIN films ON films . idFilm = notes . idFilm WHERE titre = 'Fargo' ; Quels acteurs (noms et pr\u00e9noms) ont jou\u00e9 dans \u00ab Sueurs froides \u00bb ? Il va falloir joindre plus de deux tables... Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide8\").then(() => { const ide = document.querySelector(\"div#ide8\"); load(ide, '/', '', '', films); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT nom , prenom FROM artistes JOIN roles ON roles . idActeur = artistes . idArtiste JOIN films ON roles . idFilm = films . idFilm WHERE films . titre = 'Sueurs froides' ; Quels sont les films not\u00e9s par l'internaute \u00ab Guillaume Turpin \u00bb ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide9\").then(() => { const ide = document.querySelector(\"div#ide9\"); load(ide, '/', '', '', films); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT titre FROM films JOIN notes ON notes . idFilm = films . idFilm JOIN internautes ON internautes . email = notes . email WHERE prenom = 'Guillaume' AND nom = 'Turpin' ; Quels sont les films dans lesquels l'acteur \u00ab David Carradine \u00bb a jou\u00e9 le r\u00f4le de \u00ab Bill \u00bb ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide10\").then(() => { const ide = document.querySelector(\"div#ide10\"); load(ide, '/', '', '', films); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT titre FROM films JOIN roles ON roles . idFilm = films . idFilm JOIN artistes ON roles . idActeur = artistes . idArtiste WHERE prenom = 'David' AND nom = 'Carradine' and nomRole = 'Bill' ; L'acteur \u00ab Johnny Depp \u00bb a-t-il jou\u00e9 dans des films r\u00e9alis\u00e9s hors des \u00c9tats-Unis ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide11\").then(() => { const ide = document.querySelector(\"div#ide11\"); load(ide, '/', '', '', films); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT films . titre FROM films JOIN roles ON roles . idFilm = films . idFilm JOIN artistes ON artistes . idArtiste = roles . idActeur JOIN pays ON pays . code = films . codePays WHERE artistes . nom = 'Depp' AND artistes . prenom = 'Johnny' and code != 'US' ; Quel est le film ayant obtenu la meilleure note moyenne (on rappelle que ces notes ont \u00e9t\u00e9 g\u00e9n\u00e9r\u00e9es al\u00e9atoirement). Astuce La requ\u00eate pourra ressembler \u00e0 : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT titre , AVG (...) as moyenne FROM ... JOIN ... ON ... = ... GROUP BY ... ORDER BY ... DESC LIMIT 1 ; Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide12\").then(() => { const ide = document.querySelector(\"div#ide12\"); load(ide, '/', '', '', films); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT titre , AVG ( note ) as moyenne FROM films JOIN notes ON notes . idFilm = films . idFilm GROUP BY films . idFilm ORDER BY moyenne DESC LIMIT 1 ; Classer les artistes en fonction du nombre de r\u00f4les qu'ils ont jou\u00e9s, dans l'ordre d\u00e9croissant. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide13\").then(() => { const ide = document.querySelector(\"div#ide13\"); load(ide, '/', '', '', films); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT nom , prenom , COUNT ( nomRole ) as total FROM roles JOIN artistes ON artistes . idArtiste = roles . idActeur GROUP BY idArtiste ORDER BY total DESC ;","title":"Films"},{"location":"41_films/films/#autour-des-films","text":"On s'int\u00e9resse ici \u00e0 la base de donn\u00e9es films regroupant diverses informations sur des films : titre, ann\u00e9e de r\u00e9alisation, nom du r\u00e9alisateur, r\u00e9sum\u00e9, nom et r\u00f4le des acteurs, note attribu\u00e9e par des internautes, etc ... Les diff\u00e9rentes tables sont repr\u00e9sent\u00e9es ci-dessous : Sur cette figure : chaque tableau correspond \u00e0 une table dont le nom est indiqu\u00e9 sur la premi\u00e8re ligne ; les lignes suivantes listent les attributs et leur type. varchar(255) signifie que l'attribut est un texte de 255 caract\u00e8res au maximum ; les cl\u00e9s primaires de chaque table sont indiqu\u00e9es en gras. Notez que la table roles a une cl\u00e9 primaire multiple ; les cl\u00e9s \u00e9trang\u00e8res sont repr\u00e9sent\u00e9es par des liaisons entre les tables. On ne d\u00e9taille pas ici la signification des nombres et des symboles aux extr\u00e9mit\u00e9s des liaisons. Les curieux pourront se reporter \u00e0 cette page . Cette base est t\u00e9l\u00e9chargeable au format sqlite ici . La source est l\u00e0 . Le fichier d'origine a \u00e9t\u00e9 compl\u00e9t\u00e9 par nos soins. Ainsi, les internautes et les notes associ\u00e9es sont des faux .","title":"Autour des films"},{"location":"42_cars/cars/","text":"Chacun sa voiture \u2693\ufe0e On s'int\u00e9resse ici \u00e0 la base de donn\u00e9es car_database regroupant diverses informations sur des voitures : marque et mod\u00e8le, num\u00e9ro d'immatriculation ( vehicle immatriculation number , vin dans les tables), ann\u00e9e de fabrication, nom du propri\u00e9taire, options, etc ... Les diff\u00e9rentes tables sont repr\u00e9sent\u00e9es ci-dessous : Sur cette figure : chaque tableau correspond \u00e0 une table dont le nom est indiqu\u00e9 sur la premi\u00e8re ligne ; les lignes suivantes listent les attributs et leur type. varchar(255) signifie que l'attribut est un texte de 255 caract\u00e8res au maximum ; les cl\u00e9s primaires de chaque table sont indiqu\u00e9es en gras. Notez que la table ownerships a une cl\u00e9 primaire multiple ; les cl\u00e9s \u00e9trang\u00e8res sont repr\u00e9sent\u00e9es par des liaisons entre les tables. Cette base est t\u00e9l\u00e9chargeable au format sqlite ici . Ce fichier a \u00e9t\u00e9 simplifi\u00e9 \u00e0 partir de cette source . Quelles marques ( brand en anglais) sont pr\u00e9sentes dans la base ? Votre r\u00e9ponse var cars = new Worker(path + \"/js/worker.sql-wasm.js\"); SQL Ex\u00e9cuter onElementLoaded(\"div#ide1\").then(() => { const ide = document.querySelector(\"div#ide1\"); load(ide, 'https:/nsimeyroneinc.github.io/TermNSI/42_cars/car_database.db', '', '', cars); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT brand_name FROM brands ; Quels sont les noms de famille des clients ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide2\").then(() => { const ide = document.querySelector(\"div#ide2\"); load(ide, '/', '', '', cars); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT last_name FROM customers ; Quels sont les noms des mod\u00e8les de la marque \u00ab Supreme \u00bb ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide3\").then(() => { const ide = document.querySelector(\"div#ide3\"); load(ide, '/', '', '', cars); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT model_name FROM models JOIN brands ON brands . brand_id = models . brand_id WHERE brand_name = 'Supreme' ; Quel est le prix d'achat ( purchase_price ) de la voiture poss\u00e9d\u00e9e par \u00ab Maria Swabota \u00bb ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide4\").then(() => { const ide = document.querySelector(\"div#ide4\"); load(ide, '/', '', '', cars); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT purchase_price FROM ownerships JOIN customers ON ownerships . customer_id = customers . customer_id WHERE last_name = 'Swabota' AND first_name = 'Maria' ; Quelle est la date de fabrication ( manufactured_date ) de la voiture poss\u00e9d\u00e9e par \u00ab Maria Swabota \u00bb ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide5\").then(() => { const ide = document.querySelector(\"div#ide5\"); load(ide, '/', '', '', cars); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT manufactured_date FROM ownerships JOIN customers ON ownerships . customer_id = customers . customer_id JOIN cars ON ownerships . vin = cars . vin WHERE last_name = 'Swabota' AND first_name = 'Maria' ; Quelle est la marque de la voiture poss\u00e9d\u00e9e par \u00ab Maria Swabota \u00bb ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide6\").then(() => { const ide = document.querySelector(\"div#ide6\"); load(ide, '/', '', '', cars); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT brand_name FROM ownerships JOIN customers ON ownerships . customer_id = customers . customer_id JOIN cars ON ownerships . vin = cars . vin JOIN models ON models . model_id = cars . model_id JOIN brands ON models . brand_id = brands . brand_id WHERE last_name = 'Swabota' AND first_name = 'Maria' ; Quels mod\u00e8les de voiture sont \u00e9quip\u00e9s de 4 roues motrices (elles ont un chassis dont le part_name vaut '4WD Chassis' ) ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide7\").then(() => { const ide = document.querySelector(\"div#ide7\"); load(ide, '/', '', '', cars); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT model_name FROM models JOIN options ON options . model_id = models . model_id JOIN parts ON parts . part_id = options . chassis_id WHERE part_name = '4WD Chassis' ; Reprendre la requ\u00eate pr\u00e9c\u00e9dente en donnant aussi la marque des v\u00e9hicules. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide8\").then(() => { const ide = document.querySelector(\"div#ide8\"); load(ide, '/', '', '', cars); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT model_name , brand_name FROM models JOIN brands ON brands . brand_id = models . brand_id JOIN options ON options . model_id = models . model_id JOIN parts ON parts . part_id = options . chassis_id WHERE part_name = '4WD Chassis' ; Combien de Ferrari ont \u00e9t\u00e9 vendues ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide9\").then(() => { const ide = document.querySelector(\"div#ide9\"); load(ide, '/', '', '', cars); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT COUNT ( vin ) FROM cars JOIN models ON models . model_id = cars . model_id JOIN brands ON brands . brand_id = models . brand_id WHERE brand_name = 'Ferrari' ; Quelle voiture, de quel mod\u00e8le, de quelle marque et appartenant \u00e0 qui a co\u00fbt\u00e9 le plus cher ? Astuce Trier les r\u00e9sultats par prix d\u00e9croissant et ne garder que le premier avec LIMIT 1 . Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide10\").then(() => { const ide = document.querySelector(\"div#ide10\"); load(ide, '/', '', '', cars); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT purchase_price , model_name , brand_name , last_name , first_name FROM ownerships JOIN customers ON ownerships . customer_id = customers . customer_id JOIN cars ON ownerships . vin = cars . vin JOIN models ON models . model_id = cars . model_id JOIN brands ON brands . brand_id = models . brand_id ORDER BY purchase_price DESC LIMIT 1 ;","title":"Voitures"},{"location":"42_cars/cars/#chacun-sa-voiture","text":"On s'int\u00e9resse ici \u00e0 la base de donn\u00e9es car_database regroupant diverses informations sur des voitures : marque et mod\u00e8le, num\u00e9ro d'immatriculation ( vehicle immatriculation number , vin dans les tables), ann\u00e9e de fabrication, nom du propri\u00e9taire, options, etc ... Les diff\u00e9rentes tables sont repr\u00e9sent\u00e9es ci-dessous : Sur cette figure : chaque tableau correspond \u00e0 une table dont le nom est indiqu\u00e9 sur la premi\u00e8re ligne ; les lignes suivantes listent les attributs et leur type. varchar(255) signifie que l'attribut est un texte de 255 caract\u00e8res au maximum ; les cl\u00e9s primaires de chaque table sont indiqu\u00e9es en gras. Notez que la table ownerships a une cl\u00e9 primaire multiple ; les cl\u00e9s \u00e9trang\u00e8res sont repr\u00e9sent\u00e9es par des liaisons entre les tables. Cette base est t\u00e9l\u00e9chargeable au format sqlite ici . Ce fichier a \u00e9t\u00e9 simplifi\u00e9 \u00e0 partir de cette source . Quelles marques ( brand en anglais) sont pr\u00e9sentes dans la base ? Votre r\u00e9ponse var cars = new Worker(path + \"/js/worker.sql-wasm.js\"); SQL Ex\u00e9cuter onElementLoaded(\"div#ide1\").then(() => { const ide = document.querySelector(\"div#ide1\"); load(ide, 'https:/nsimeyroneinc.github.io/TermNSI/42_cars/car_database.db', '', '', cars); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT brand_name FROM brands ; Quels sont les noms de famille des clients ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide2\").then(() => { const ide = document.querySelector(\"div#ide2\"); load(ide, '/', '', '', cars); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT last_name FROM customers ; Quels sont les noms des mod\u00e8les de la marque \u00ab Supreme \u00bb ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide3\").then(() => { const ide = document.querySelector(\"div#ide3\"); load(ide, '/', '', '', cars); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT model_name FROM models JOIN brands ON brands . brand_id = models . brand_id WHERE brand_name = 'Supreme' ; Quel est le prix d'achat ( purchase_price ) de la voiture poss\u00e9d\u00e9e par \u00ab Maria Swabota \u00bb ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide4\").then(() => { const ide = document.querySelector(\"div#ide4\"); load(ide, '/', '', '', cars); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT purchase_price FROM ownerships JOIN customers ON ownerships . customer_id = customers . customer_id WHERE last_name = 'Swabota' AND first_name = 'Maria' ; Quelle est la date de fabrication ( manufactured_date ) de la voiture poss\u00e9d\u00e9e par \u00ab Maria Swabota \u00bb ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide5\").then(() => { const ide = document.querySelector(\"div#ide5\"); load(ide, '/', '', '', cars); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT manufactured_date FROM ownerships JOIN customers ON ownerships . customer_id = customers . customer_id JOIN cars ON ownerships . vin = cars . vin WHERE last_name = 'Swabota' AND first_name = 'Maria' ; Quelle est la marque de la voiture poss\u00e9d\u00e9e par \u00ab Maria Swabota \u00bb ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide6\").then(() => { const ide = document.querySelector(\"div#ide6\"); load(ide, '/', '', '', cars); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT brand_name FROM ownerships JOIN customers ON ownerships . customer_id = customers . customer_id JOIN cars ON ownerships . vin = cars . vin JOIN models ON models . model_id = cars . model_id JOIN brands ON models . brand_id = brands . brand_id WHERE last_name = 'Swabota' AND first_name = 'Maria' ; Quels mod\u00e8les de voiture sont \u00e9quip\u00e9s de 4 roues motrices (elles ont un chassis dont le part_name vaut '4WD Chassis' ) ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide7\").then(() => { const ide = document.querySelector(\"div#ide7\"); load(ide, '/', '', '', cars); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT model_name FROM models JOIN options ON options . model_id = models . model_id JOIN parts ON parts . part_id = options . chassis_id WHERE part_name = '4WD Chassis' ; Reprendre la requ\u00eate pr\u00e9c\u00e9dente en donnant aussi la marque des v\u00e9hicules. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide8\").then(() => { const ide = document.querySelector(\"div#ide8\"); load(ide, '/', '', '', cars); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT model_name , brand_name FROM models JOIN brands ON brands . brand_id = models . brand_id JOIN options ON options . model_id = models . model_id JOIN parts ON parts . part_id = options . chassis_id WHERE part_name = '4WD Chassis' ; Combien de Ferrari ont \u00e9t\u00e9 vendues ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide9\").then(() => { const ide = document.querySelector(\"div#ide9\"); load(ide, '/', '', '', cars); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT COUNT ( vin ) FROM cars JOIN models ON models . model_id = cars . model_id JOIN brands ON brands . brand_id = models . brand_id WHERE brand_name = 'Ferrari' ; Quelle voiture, de quel mod\u00e8le, de quelle marque et appartenant \u00e0 qui a co\u00fbt\u00e9 le plus cher ? Astuce Trier les r\u00e9sultats par prix d\u00e9croissant et ne garder que le premier avec LIMIT 1 . Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide10\").then(() => { const ide = document.querySelector(\"div#ide10\"); load(ide, '/', '', '', cars); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT purchase_price , model_name , brand_name , last_name , first_name FROM ownerships JOIN customers ON ownerships . customer_id = customers . customer_id JOIN cars ON ownerships . vin = cars . vin JOIN models ON models . model_id = cars . model_id JOIN brands ON brands . brand_id = models . brand_id ORDER BY purchase_price DESC LIMIT 1 ;","title":"Chacun sa voiture"},{"location":"51_world/world/","text":"Autour du world \u2693\ufe0e On consid\u00e8re dans ce sujet la base de donn\u00e9es world . Cette base contient trois relations/tables : Les villes Les pays Les langues parl\u00e9es city : contient des informations d\u00e9crivant des villes : ID : l'identifiant de la ville (entier, cl\u00e9 primaire) Name : le nom de la ville (texte) CountryCode : le code du pays dans lequel est situ\u00e9 la ville (texte, cl\u00e9 \u00e9trang\u00e8re vers country.Code ) District : la r\u00e9gion d'appartenance de la ville (texte) Population : la population de la ville (entier) country : contient des informations d\u00e9crivant les pays : Code : le code du pays (texte, cl\u00e9 primaire) Name : le nom du pays (texte) Continent : le continent du pays (texte) SurfaceArea : la surface du pays (nombre d\u00e9cimal) Population : la population du pays (entier) Capital : la capitale du pays (entier, cl\u00e9 \u00e9trang\u00e8re vers city.ID ) d'autres attributs qui ne nous int\u00e9ressent pas ici... countryLanguage : d\u00e9crit les langues parl\u00e9es dans le pays : CountryCode : le code du pays (texte, cl\u00e9 \u00e9trang\u00e8re vers country.Code ) Language : la langue concern\u00e9e par cette entr\u00e9e (texte) IsOfficial : cette langue est-elle officielle dans ce pays ? (texte, T pour True , F pour False ) Percentage : le pourcentage de locuteurs dans le pays (nombre d\u00e9cimal) Notez que la cl\u00e9 primaire de la table countryLanguage est le couple (CountryCode, Language) . Cette base est t\u00e9l\u00e9chargeable au format sqlite ici . La source provient de ce site . Afficher le nom de toutes les villes ainsi que leur population. Astuce Vous pouvez rajouter LIMIT 10 \u00e0 la fin de votre requ\u00eate afin de n'afficher que les 10 premiers r\u00e9sultats. Il y a beaucoup de villes ! Votre r\u00e9ponse var monde = new Worker(path + \"/js/worker.sql-wasm.js\"); SQL Ex\u00e9cuter onElementLoaded(\"div#ide1\").then(() => { const ide = document.querySelector(\"div#ide1\"); load(ide, 'https:/nsimeyroneinc.github.io/TermNSI/51_world/world.db', '', '', monde); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT Name , Population FROM city ; Afficher le nom et la population des villes de plus de huit millions d'habitants (inclus): Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide2\").then(() => { const ide = document.querySelector(\"div#ide2\"); load(ide, '/', '', '', monde); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT Name , Population FROM city WHERE Population >= 8000000 ; Quel est le Code de la France ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide3\").then(() => { const ide = document.querySelector(\"div#ide3\"); load(ide, '/', '', '', monde); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT Code FROM country WHERE Name = 'France' ; La ville de Rennes est associ\u00e9e au District de \"Haute-Normandie\" . Corriger cette erreur afin de placer Rennes en Bretagne. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide4\").then(() => { const ide = document.querySelector(\"div#ide4\"); load(ide, '/', '', '', monde); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL UPDATE city SET District = 'Bretagne' WHERE Name = 'Rennes' ; Ins\u00e9rer la ville de Vannes ( District de Bretagne et population de 53 719 habitants) Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide5\").then(() => { const ide = document.querySelector(\"div#ide5\"); load(ide, '/', '', '', monde); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL INSERT INTO city ( District , CountryCode , Name , Population ) VALUES ( \"Bretagne\" , \"FRA\" , \"Vannes\" , 53719 ); Quels sont les noms des pays dans lesquels le portugais ( Portuguese dans la base) est une langue officielle ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide6\").then(() => { const ide = document.querySelector(\"div#ide6\"); load(ide, '/', '', '', monde); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT Name FROM country JOIN countrylanguage ON countrylanguage . CountryCode = country . Code WHERE Language = 'Portuguese' AND IsOfficial = 'T' ; Combien de villes ont un nom d\u00e9butant par les lettres Van ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide7\").then(() => { const ide = document.querySelector(\"div#ide7\"); load(ide, '/', '', '', monde); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT COUNT ( Name ) FROM city WHERE Name LIKE \"Van%\" Afficher les noms et la population des villes fran\u00e7aises de plus de 200 000 habitants dans l'ordre d\u00e9croissant de leur population. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide8\").then(() => { const ide = document.querySelector(\"div#ide8\"); load(ide, '/', '', '', monde); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT Name , Population FROM city WHERE CountryCode = 'FRA' AND Population >= 200000 ORDER BY Population DESC ; Quel est le nom et la surface du plus petit pays du monde ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide9\").then(() => { const ide = document.querySelector(\"div#ide9\"); load(ide, '/', '', '', monde); }).catch(() => {}); R\u00e9ponse En sqlite on peut faire : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT Name , MIN ( SurfaceArea ) FROM country ; Une approche plus classique est toutefois d'utiliser des requ\u00eates imbriqu\u00e9es : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT Name , SurfaceArea FROM country WHERE SurfaceArea = ( SELECT Min ( SurfaceArea ) FROM country ); Quel code permettrait de cr\u00e9er la table district dont les attributs sont : id : un entier, cl\u00e9 primaire name : nom du district, au format texte countryCode : le code du pays d'appartenance de ce district countryCode est une cl\u00e9 \u00e9trang\u00e8re pointant vers la table country . Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide10\").then(() => { const ide = document.querySelector(\"div#ide10\"); load(ide, '/', '', '', monde); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL CREATE TABLE \"district\" ( \"id\" INTEGER , \"name\" TEXT , \"countryCode\" INTEGER , PRIMARY KEY ( \"id\" ), FOREIGN KEY ( \"CountryCode\" ) REFERENCES \"country\" ( \"Code\" ) );","title":"World"},{"location":"51_world/world/#autour-du-world","text":"On consid\u00e8re dans ce sujet la base de donn\u00e9es world . Cette base contient trois relations/tables : Les villes Les pays Les langues parl\u00e9es city : contient des informations d\u00e9crivant des villes : ID : l'identifiant de la ville (entier, cl\u00e9 primaire) Name : le nom de la ville (texte) CountryCode : le code du pays dans lequel est situ\u00e9 la ville (texte, cl\u00e9 \u00e9trang\u00e8re vers country.Code ) District : la r\u00e9gion d'appartenance de la ville (texte) Population : la population de la ville (entier) country : contient des informations d\u00e9crivant les pays : Code : le code du pays (texte, cl\u00e9 primaire) Name : le nom du pays (texte) Continent : le continent du pays (texte) SurfaceArea : la surface du pays (nombre d\u00e9cimal) Population : la population du pays (entier) Capital : la capitale du pays (entier, cl\u00e9 \u00e9trang\u00e8re vers city.ID ) d'autres attributs qui ne nous int\u00e9ressent pas ici... countryLanguage : d\u00e9crit les langues parl\u00e9es dans le pays : CountryCode : le code du pays (texte, cl\u00e9 \u00e9trang\u00e8re vers country.Code ) Language : la langue concern\u00e9e par cette entr\u00e9e (texte) IsOfficial : cette langue est-elle officielle dans ce pays ? (texte, T pour True , F pour False ) Percentage : le pourcentage de locuteurs dans le pays (nombre d\u00e9cimal) Notez que la cl\u00e9 primaire de la table countryLanguage est le couple (CountryCode, Language) . Cette base est t\u00e9l\u00e9chargeable au format sqlite ici . La source provient de ce site . Afficher le nom de toutes les villes ainsi que leur population. Astuce Vous pouvez rajouter LIMIT 10 \u00e0 la fin de votre requ\u00eate afin de n'afficher que les 10 premiers r\u00e9sultats. Il y a beaucoup de villes ! Votre r\u00e9ponse var monde = new Worker(path + \"/js/worker.sql-wasm.js\"); SQL Ex\u00e9cuter onElementLoaded(\"div#ide1\").then(() => { const ide = document.querySelector(\"div#ide1\"); load(ide, 'https:/nsimeyroneinc.github.io/TermNSI/51_world/world.db', '', '', monde); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT Name , Population FROM city ; Afficher le nom et la population des villes de plus de huit millions d'habitants (inclus): Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide2\").then(() => { const ide = document.querySelector(\"div#ide2\"); load(ide, '/', '', '', monde); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT Name , Population FROM city WHERE Population >= 8000000 ; Quel est le Code de la France ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide3\").then(() => { const ide = document.querySelector(\"div#ide3\"); load(ide, '/', '', '', monde); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT Code FROM country WHERE Name = 'France' ; La ville de Rennes est associ\u00e9e au District de \"Haute-Normandie\" . Corriger cette erreur afin de placer Rennes en Bretagne. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide4\").then(() => { const ide = document.querySelector(\"div#ide4\"); load(ide, '/', '', '', monde); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL UPDATE city SET District = 'Bretagne' WHERE Name = 'Rennes' ; Ins\u00e9rer la ville de Vannes ( District de Bretagne et population de 53 719 habitants) Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide5\").then(() => { const ide = document.querySelector(\"div#ide5\"); load(ide, '/', '', '', monde); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL INSERT INTO city ( District , CountryCode , Name , Population ) VALUES ( \"Bretagne\" , \"FRA\" , \"Vannes\" , 53719 ); Quels sont les noms des pays dans lesquels le portugais ( Portuguese dans la base) est une langue officielle ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide6\").then(() => { const ide = document.querySelector(\"div#ide6\"); load(ide, '/', '', '', monde); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT Name FROM country JOIN countrylanguage ON countrylanguage . CountryCode = country . Code WHERE Language = 'Portuguese' AND IsOfficial = 'T' ; Combien de villes ont un nom d\u00e9butant par les lettres Van ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide7\").then(() => { const ide = document.querySelector(\"div#ide7\"); load(ide, '/', '', '', monde); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT COUNT ( Name ) FROM city WHERE Name LIKE \"Van%\" Afficher les noms et la population des villes fran\u00e7aises de plus de 200 000 habitants dans l'ordre d\u00e9croissant de leur population. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide8\").then(() => { const ide = document.querySelector(\"div#ide8\"); load(ide, '/', '', '', monde); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT Name , Population FROM city WHERE CountryCode = 'FRA' AND Population >= 200000 ORDER BY Population DESC ; Quel est le nom et la surface du plus petit pays du monde ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide9\").then(() => { const ide = document.querySelector(\"div#ide9\"); load(ide, '/', '', '', monde); }).catch(() => {}); R\u00e9ponse En sqlite on peut faire : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT Name , MIN ( SurfaceArea ) FROM country ; Une approche plus classique est toutefois d'utiliser des requ\u00eates imbriqu\u00e9es : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT Name , SurfaceArea FROM country WHERE SurfaceArea = ( SELECT Min ( SurfaceArea ) FROM country ); Quel code permettrait de cr\u00e9er la table district dont les attributs sont : id : un entier, cl\u00e9 primaire name : nom du district, au format texte countryCode : le code du pays d'appartenance de ce district countryCode est une cl\u00e9 \u00e9trang\u00e8re pointant vers la table country . Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide10\").then(() => { const ide = document.querySelector(\"div#ide10\"); load(ide, '/', '', '', monde); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL CREATE TABLE \"district\" ( \"id\" INTEGER , \"name\" TEXT , \"countryCode\" INTEGER , PRIMARY KEY ( \"id\" ), FOREIGN KEY ( \"CountryCode\" ) REFERENCES \"country\" ( \"Code\" ) );","title":"Autour du world"},{"location":"52_netflix/netflix/","text":"Les programmes de netflix \u2693\ufe0e On consid\u00e8re dans ce sujet la base de donn\u00e9es netflix contenant des informations sur les programmes de la plateforme. Cette base contient plusieurs relations/tables : Les pays Les r\u00e9alisateurs Les genres Les programmes Les classifications Les genres de chaque programme Les types de programmes countries : contient des informations d\u00e9crivant des pays : id : l'identifiant du pays (entier, cl\u00e9 primaire) country : le nom du pays (texte) directors : contient des informations d\u00e9crivant les r\u00e9alisateurs des programmes : id : l'identifiant du r\u00e9alisateur (entier, cl\u00e9 primaire) director : le nom du ou des r\u00e9alisateurs (texte) genres : d\u00e9crit les genres des programmes : id : l'identifiant du genre (entier, cl\u00e9 primaire) genre : le nom du genre (texte) programs : d\u00e9crit les programmes : show_id : l'identifiant du programme (texte, cl\u00e9 primaire) type : l'identifiant du type de programme (entier, cl\u00e9 \u00e9trang\u00e8re pointant vers types.id ) title : le nom du programme (texte) director : l'identifiant du ou des r\u00e9alisateurs (entier, cl\u00e9 \u00e9trang\u00e8re pointant vers directors.id ) country : l'identifiant du pays du programme (entier, cl\u00e9 \u00e9trang\u00e8re pointant vers countries.id ) date_added : la date d'ajout sur la plateforme (texte) release_year : la date de r\u00e9alisation du programme (entier) ratings : l'identifiant de la classification du programme (entier, cl\u00e9 \u00e9trang\u00e8re pointant vers ratings.id ) duration : la dur\u00e9e du programme en saison ou minutes (texte) ratings : d\u00e9crit les classifications des programmes : id : l'identifiant de la classification (entier, cl\u00e9 primaire) rating : le nom de la classification (texte) show_genres : d\u00e9crit les genres associ\u00e9s \u00e0 chaque programme : show_id : l'identifiant du programme (texte, cl\u00e9 \u00e9trang\u00e8re pointant vers programs.show_id ) genre : l'identifiant du genre (entier, cl\u00e9 \u00e9trang\u00e8re pointant vers genres.id ) La cl\u00e9 primaire de cette table est le couple (show_id, genre) . types : d\u00e9crit les types de programmes : id : l'identifiant du type (entier, cl\u00e9 primaire) type : le nom du type (texte) Cette base est t\u00e9l\u00e9chargeable au format sqlite ici . La source est sur kaggle . Afficher le nom des programmes ainsi que leur date d'ajout sur la plateforme. Votre r\u00e9ponse var netflix = new Worker(path + \"/js/worker.sql-wasm.js\"); SQL Ex\u00e9cuter onElementLoaded(\"div#ide1\").then(() => { const ide = document.querySelector(\"div#ide1\"); load(ide, 'https:/nsimeyroneinc.github.io/TermNSI/52_netflix/netflix.db', '', '', netflix); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT title , date_added FROM programs ; Afficher le nom et la date de r\u00e9alisation des programmes r\u00e9alis\u00e9s apr\u00e8s 2020 (inclus): Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide2\").then(() => { const ide = document.querySelector(\"div#ide2\"); load(ide, '/', '', '', netflix); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT title , release_year FROM programs WHERE release_year >= 2020 ; Quel est l'identifiant du r\u00e9alisateur nomm\u00e9 Michael Bay ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide3\").then(() => { const ide = document.querySelector(\"div#ide3\"); load(ide, '/', '', '', netflix); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT id FROM directors WHERE director = 'Michael Bay' ; La s\u00e9rie The Witcher comporte d\u00e9sormais 2 saisons alors que la base n'en indique qu'une seule. Corriger cette erreur. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide4\").then(() => { const ide = document.querySelector(\"div#ide4\"); load(ide, '/', '', '', netflix); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL UPDATE programs SET duration = '2 seasons' WHERE title = 'The Witcher' ; Ins\u00e9rer la s\u00e9rie t\u00e9l\u00e9vis\u00e9e The Sandman , ajout\u00e9e en 2022, de r\u00e9alisateurs multiples (utiliser l'identifiant correspondant \u00e0 Not Given ), et de classification TV-MA . Les autres champs seront laiss\u00e9s vierges. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide5\").then(() => { const ide = document.querySelector(\"div#ide5\"); load(ide, '/', '', '', netflix); }).catch(() => {}); R\u00e9ponse On r\u00e9cup\u00e8re tout d'abord l'identifiant du r\u00e9alisateur Not Given : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT id FROM directors WHERE director = 'Not Given' ; On obtient le 1238 . On fait de m\u00eame avec l'identifiant de la classification TV-MA : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT id FROM ratings WHERE rating = 'TV-MA' ; On obtient le 9 . On peut alors effectuer l'insertion : \ud83d\uddc2\ufe0f Requ\u00eate SQL INSERT INTO programs ( title , release_year , director , rating ) VALUES ( 'The Sandman' , 2022 , 1238 , 9 ); Il \u00e9tait aussi possible de faire : \ud83d\uddc2\ufe0f Requ\u00eate SQL INSERT INTO programs ( title , release_year , director , rating ) VALUES ( 'The Sandman' , 2022 , ( SELECT id FROM directors WHERE director = 'Not Given' ), ( SELECT id FROM ratings WHERE rating = 'TV-MA' )); Quels sont les noms des programmes r\u00e9alis\u00e9s en France ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide6\").then(() => { const ide = document.querySelector(\"div#ide6\"); load(ide, '/', '', '', netflix); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT title FROM programs JOIN countries ON countries . id = programs . country WHERE countries . country = 'France' ; Combien de programmes ont \u00e9t\u00e9 r\u00e9alis\u00e9s en 2020 en Inde ( India dans la base) ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide7\").then(() => { const ide = document.querySelector(\"div#ide7\"); load(ide, '/', '', '', netflix); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT COUNT ( * ) FROM programs JOIN countries ON countries . id = programs . country WHERE countries . country = 'India' AND release_year = 2020 ; Afficher les noms et la date de r\u00e9alisation des s\u00e9ries t\u00e9l\u00e9vis\u00e9es r\u00e9alis\u00e9es en Uruguay dans l'ordre d\u00e9croissant de leur date de r\u00e9alisation. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide8\").then(() => { const ide = document.querySelector(\"div#ide8\"); load(ide, '/', '', '', netflix); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT title , release_year FROM programs JOIN countries ON countries . id = programs . country WHERE countries . country = 'Uruguay' ORDER BY release_year DESC ; \u00c0 quel genre (au format texte) est associ\u00e9e la s\u00e9rie Dowton Abbey ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide9\").then(() => { const ide = document.querySelector(\"div#ide9\"); load(ide, '/', '', '', netflix); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT genres . genre FROM show_genres JOIN programs ON programs . show_id = show_genres . show_id JOIN genres ON genres . id = show_genres . genre WHERE programs . title = 'Downton Abbey' ; Quel code permettrait de cr\u00e9er la table notations dont les attributs sont : id : un entier, cl\u00e9 primaire show_id : identifiant d'un programme, au format texte notation : la note du programme, au format entier show_id est une cl\u00e9 \u00e9trang\u00e8re pointant vers la table programs . Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide10\").then(() => { const ide = document.querySelector(\"div#ide10\"); load(ide, '/', '', '', netflix); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL CREATE TABLE \"notations\" ( \"id\" INTEGER , \"show_id\" TEXT , \"notation\" INTEGER , PRIMARY KEY ( \"id\" ), FOREIGN KEY ( \"show_id\" ) REFERENCES \"programs\" ( \"show_id\" ) );","title":"Netflix"},{"location":"52_netflix/netflix/#les-programmes-de-netflix","text":"On consid\u00e8re dans ce sujet la base de donn\u00e9es netflix contenant des informations sur les programmes de la plateforme. Cette base contient plusieurs relations/tables : Les pays Les r\u00e9alisateurs Les genres Les programmes Les classifications Les genres de chaque programme Les types de programmes countries : contient des informations d\u00e9crivant des pays : id : l'identifiant du pays (entier, cl\u00e9 primaire) country : le nom du pays (texte) directors : contient des informations d\u00e9crivant les r\u00e9alisateurs des programmes : id : l'identifiant du r\u00e9alisateur (entier, cl\u00e9 primaire) director : le nom du ou des r\u00e9alisateurs (texte) genres : d\u00e9crit les genres des programmes : id : l'identifiant du genre (entier, cl\u00e9 primaire) genre : le nom du genre (texte) programs : d\u00e9crit les programmes : show_id : l'identifiant du programme (texte, cl\u00e9 primaire) type : l'identifiant du type de programme (entier, cl\u00e9 \u00e9trang\u00e8re pointant vers types.id ) title : le nom du programme (texte) director : l'identifiant du ou des r\u00e9alisateurs (entier, cl\u00e9 \u00e9trang\u00e8re pointant vers directors.id ) country : l'identifiant du pays du programme (entier, cl\u00e9 \u00e9trang\u00e8re pointant vers countries.id ) date_added : la date d'ajout sur la plateforme (texte) release_year : la date de r\u00e9alisation du programme (entier) ratings : l'identifiant de la classification du programme (entier, cl\u00e9 \u00e9trang\u00e8re pointant vers ratings.id ) duration : la dur\u00e9e du programme en saison ou minutes (texte) ratings : d\u00e9crit les classifications des programmes : id : l'identifiant de la classification (entier, cl\u00e9 primaire) rating : le nom de la classification (texte) show_genres : d\u00e9crit les genres associ\u00e9s \u00e0 chaque programme : show_id : l'identifiant du programme (texte, cl\u00e9 \u00e9trang\u00e8re pointant vers programs.show_id ) genre : l'identifiant du genre (entier, cl\u00e9 \u00e9trang\u00e8re pointant vers genres.id ) La cl\u00e9 primaire de cette table est le couple (show_id, genre) . types : d\u00e9crit les types de programmes : id : l'identifiant du type (entier, cl\u00e9 primaire) type : le nom du type (texte) Cette base est t\u00e9l\u00e9chargeable au format sqlite ici . La source est sur kaggle . Afficher le nom des programmes ainsi que leur date d'ajout sur la plateforme. Votre r\u00e9ponse var netflix = new Worker(path + \"/js/worker.sql-wasm.js\"); SQL Ex\u00e9cuter onElementLoaded(\"div#ide1\").then(() => { const ide = document.querySelector(\"div#ide1\"); load(ide, 'https:/nsimeyroneinc.github.io/TermNSI/52_netflix/netflix.db', '', '', netflix); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT title , date_added FROM programs ; Afficher le nom et la date de r\u00e9alisation des programmes r\u00e9alis\u00e9s apr\u00e8s 2020 (inclus): Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide2\").then(() => { const ide = document.querySelector(\"div#ide2\"); load(ide, '/', '', '', netflix); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT title , release_year FROM programs WHERE release_year >= 2020 ; Quel est l'identifiant du r\u00e9alisateur nomm\u00e9 Michael Bay ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide3\").then(() => { const ide = document.querySelector(\"div#ide3\"); load(ide, '/', '', '', netflix); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT id FROM directors WHERE director = 'Michael Bay' ; La s\u00e9rie The Witcher comporte d\u00e9sormais 2 saisons alors que la base n'en indique qu'une seule. Corriger cette erreur. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide4\").then(() => { const ide = document.querySelector(\"div#ide4\"); load(ide, '/', '', '', netflix); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL UPDATE programs SET duration = '2 seasons' WHERE title = 'The Witcher' ; Ins\u00e9rer la s\u00e9rie t\u00e9l\u00e9vis\u00e9e The Sandman , ajout\u00e9e en 2022, de r\u00e9alisateurs multiples (utiliser l'identifiant correspondant \u00e0 Not Given ), et de classification TV-MA . Les autres champs seront laiss\u00e9s vierges. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide5\").then(() => { const ide = document.querySelector(\"div#ide5\"); load(ide, '/', '', '', netflix); }).catch(() => {}); R\u00e9ponse On r\u00e9cup\u00e8re tout d'abord l'identifiant du r\u00e9alisateur Not Given : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT id FROM directors WHERE director = 'Not Given' ; On obtient le 1238 . On fait de m\u00eame avec l'identifiant de la classification TV-MA : \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT id FROM ratings WHERE rating = 'TV-MA' ; On obtient le 9 . On peut alors effectuer l'insertion : \ud83d\uddc2\ufe0f Requ\u00eate SQL INSERT INTO programs ( title , release_year , director , rating ) VALUES ( 'The Sandman' , 2022 , 1238 , 9 ); Il \u00e9tait aussi possible de faire : \ud83d\uddc2\ufe0f Requ\u00eate SQL INSERT INTO programs ( title , release_year , director , rating ) VALUES ( 'The Sandman' , 2022 , ( SELECT id FROM directors WHERE director = 'Not Given' ), ( SELECT id FROM ratings WHERE rating = 'TV-MA' )); Quels sont les noms des programmes r\u00e9alis\u00e9s en France ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide6\").then(() => { const ide = document.querySelector(\"div#ide6\"); load(ide, '/', '', '', netflix); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT title FROM programs JOIN countries ON countries . id = programs . country WHERE countries . country = 'France' ; Combien de programmes ont \u00e9t\u00e9 r\u00e9alis\u00e9s en 2020 en Inde ( India dans la base) ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide7\").then(() => { const ide = document.querySelector(\"div#ide7\"); load(ide, '/', '', '', netflix); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT COUNT ( * ) FROM programs JOIN countries ON countries . id = programs . country WHERE countries . country = 'India' AND release_year = 2020 ; Afficher les noms et la date de r\u00e9alisation des s\u00e9ries t\u00e9l\u00e9vis\u00e9es r\u00e9alis\u00e9es en Uruguay dans l'ordre d\u00e9croissant de leur date de r\u00e9alisation. Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide8\").then(() => { const ide = document.querySelector(\"div#ide8\"); load(ide, '/', '', '', netflix); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT title , release_year FROM programs JOIN countries ON countries . id = programs . country WHERE countries . country = 'Uruguay' ORDER BY release_year DESC ; \u00c0 quel genre (au format texte) est associ\u00e9e la s\u00e9rie Dowton Abbey ? Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide9\").then(() => { const ide = document.querySelector(\"div#ide9\"); load(ide, '/', '', '', netflix); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL SELECT genres . genre FROM show_genres JOIN programs ON programs . show_id = show_genres . show_id JOIN genres ON genres . id = show_genres . genre WHERE programs . title = 'Downton Abbey' ; Quel code permettrait de cr\u00e9er la table notations dont les attributs sont : id : un entier, cl\u00e9 primaire show_id : identifiant d'un programme, au format texte notation : la note du programme, au format entier show_id est une cl\u00e9 \u00e9trang\u00e8re pointant vers la table programs . Votre r\u00e9ponse SQL Ex\u00e9cuter onElementLoaded(\"div#ide10\").then(() => { const ide = document.querySelector(\"div#ide10\"); load(ide, '/', '', '', netflix); }).catch(() => {}); R\u00e9ponse \ud83d\uddc2\ufe0f Requ\u00eate SQL CREATE TABLE \"notations\" ( \"id\" INTEGER , \"show_id\" TEXT , \"notation\" INTEGER , PRIMARY KEY ( \"id\" ), FOREIGN KEY ( \"show_id\" ) REFERENCES \"programs\" ( \"show_id\" ) );","title":"Les programmes de netflix"}]}